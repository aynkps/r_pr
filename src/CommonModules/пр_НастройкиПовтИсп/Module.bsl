
#Область  ПрограммныйИнтерфейс

Функция ВерсияБСП() Экспорт
	Возврат СтандартныеПодсистемыСервер.ВерсияБиблиотеки();	
КонецФункции 

Функция ИсполнятьКод(ИмяМодуля, Метод, Пользователь = Неопределено)   Экспорт 
	Возврат пр_Общий.ИсполнятьКод(ИмяМодуля, Метод, Пользователь);
КонецФункции 

Функция ИсполняемыйМодуль(ИмяМодуля, Пользователь = Неопределено)   Экспорт 
	Возврат пр_Общий.ИсполняемыйМодуль(ИмяМодуля, Пользователь);
КонецФункции 

Функция НастройкиИсполняемогоМодуля(ИмяМодуля, Пользователь = Неопределено)   Экспорт 
	Возврат пр_Общий.НастройкиИсполняемогоМодуля(ИмяМодуля, Пользователь);
КонецФункции 

//TODO:  Переделать. Перенести настройки ИБ в пр_НастройкиИнформационнойБазы, + телеграм канал, + задачи
Функция ТекстЗапросаДляОпределенияИсполняемогоМетодаМодуля()
	Возврат
		"ВЫБРАТЬ
		|	оду_БазыУчастникиОбмена.ИДБазы КАК ИДБазы,
		|	оду_БазыУчастникиОбмена.Сервер КАК Сервер,
		|	оду_БазыУчастникиОбмена.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(оду_НастройкиИнформационнойБазы.РежимОтладки, ИСТИНА) КАК РежимОтладки,
		|	ЕСТЬNULL(оду_НастройкиИнформационнойБазы1.ПутьКОбработкамОтладки, """") КАК ОбщийПутьКОтладкиБД
		|ПОМЕСТИТЬ ВТ_ДанныеБазы
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_НастройкиИнформационнойБазы КАК оду_НастройкиИнформационнойБазы
		|		ПО оду_БазыУчастникиОбмена.Код = оду_НастройкиИнформационнойБазы.ИмяРабочейБД
		|			И оду_БазыУчастникиОбмена.Сервер = оду_НастройкиИнформационнойБазы.СерверРабочейБД,
		|	РегистрСведений.оду_НастройкиИнформационнойБазы КАК оду_НастройкиИнформационнойБазы1
		|ГДЕ
		|	оду_БазыУчастникиОбмена.ТекущаяБД = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	пр_НастройкиРаботыМодулейМетодов.Модуль КАК Модуль,
		|	пр_НастройкиРаботыМодулейМетодов.Метод КАК Метод,
		|	пр_НастройкиРаботыМодулейМетодов.Пользователь КАК Пользователь,
		|	пр_НастройкиРаботыМодулейМетодов.Использовать КАК Использовать,
		|	пр_НастройкиРаботыМодулейМетодов.ПутьКОбработкеОтладки КАК ПутьКОбработкеОтладки
		|ПОМЕСТИТЬ ВТ_НастройкиМодуля
		|ИЗ
		|	РегистрСведений.пр_НастройкиРаботыМодулейМетодов КАК пр_НастройкиРаботыМодулейМетодов
		|ГДЕ
		|	пр_НастройкиРаботыМодулейМетодов.Модуль = &ИмяМодуля
		|	И пр_НастройкиРаботыМодулейМетодов.Использовать = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НастройкиМодуля.Модуль КАК Модуль,
		|	ВТ_НастройкиМодуля.Метод КАК Метод,
		|	ВТ_НастройкиМодуля.Пользователь КАК Пользователь,
		|	ВТ_НастройкиМодуля.Использовать КАК Использовать,
		|	ВТ_НастройкиМодуля.ПутьКОбработкеОтладки КАК ПутьКОбработкеОтладки,
		|	0 КАК Приоритет
		|ПОМЕСТИТЬ ВТ_ДанныеМодуля
		|ИЗ
		|	ВТ_НастройкиМодуля КАК ВТ_НастройкиМодуля
		|ГДЕ
		|	ВТ_НастройкиМодуля.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И ВТ_НастройкиМодуля.Метод = """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_НастройкиМодуля.Модуль,
		|	ВТ_НастройкиМодуля.Метод,
		|	ВТ_НастройкиМодуля.Пользователь,
		|	ВТ_НастройкиМодуля.Использовать,
		|	ВТ_НастройкиМодуля.ПутьКОбработкеОтладки,
		|	1
		|ИЗ
		|	ВТ_НастройкиМодуля КАК ВТ_НастройкиМодуля
		|ГДЕ
		|	ВТ_НастройкиМодуля.Метод = &ИмяМетода
		|	И ВТ_НастройкиМодуля.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_НастройкиМодуля.Модуль,
		|	ВТ_НастройкиМодуля.Метод,
		|	ВТ_НастройкиМодуля.Пользователь,
		|	ВТ_НастройкиМодуля.Использовать,
		|	ВТ_НастройкиМодуля.ПутьКОбработкеОтладки,
		|	2
		|ИЗ
		|	ВТ_НастройкиМодуля КАК ВТ_НастройкиМодуля
		|ГДЕ
		|	ВТ_НастройкиМодуля.Метод = &ИмяМетода
		|	И ВТ_НастройкиМодуля.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеМодуля.Модуль КАК Модуль,
		|	ВТ_ДанныеМодуля.Метод КАК Метод,
		|	ВТ_ДанныеМодуля.Пользователь КАК Пользователь,
		|	ВТ_ДанныеМодуля.Использовать КАК Использовать,
		|	ВТ_ДанныеМодуля.ПутьКОбработкеОтладки КАК ПутьКОбработкеОтладки,
		|	ВТ_ДанныеМодуля.Приоритет КАК Приоритет
		|ПОМЕСТИТЬ ВТ_ИтоговыеНастройкиМодуля
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_ДанныеМодуля.Модуль КАК Модуль,
		|		МАКСИМУМ(ВТ_ДанныеМодуля.Приоритет) КАК Приоритет
		|	ИЗ
		|		ВТ_ДанныеМодуля КАК ВТ_ДанныеМодуля
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВТ_ДанныеМодуля.Модуль) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеМодуля КАК ВТ_ДанныеМодуля
		|		ПО ВложенныйЗапрос.Модуль = ВТ_ДанныеМодуля.Модуль
		|			И ВложенныйЗапрос.Приоритет = ВТ_ДанныеМодуля.Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеБазы.ИДБазы КАК ИДБазы,
		|	ВТ_ДанныеБазы.Сервер КАК Сервер,
		|	ВТ_ДанныеБазы.Ссылка КАК Ссылка,
		|	ВТ_ДанныеБазы.Использовать КАК Использовать,
		|	ВТ_ДанныеБазы.ОбщийПутьКОтладкиБД КАК ОбщийПутьКОтладкиБД,
		|	ВТ_ИтоговыеНастройкиМодуля.ПутьКОбработкеОтладки КАК ПутьКОбработкеОтладки
		|ИЗ
		|	ВТ_ДанныеБазы КАК ВТ_ДанныеБазы,
		|	ВТ_ИтоговыеНастройкиМодуля КАК ВТ_ИтоговыеНастройкиМодуля";
	
КонецФункции 

Функция ИсполняемыйМетодМодуля(ИмяМодуля, Пользователь = Неопределено, ИмяМетода = "")   Экспорт 
	
	//ПолныйПуть = ""; 
	//НастройкиТекущейБД = оду_ОбщийПовтИсп.НастройкиРегистрации();
	//
	//Если ИмяМодуля = "оду_Общий" ИЛИ ИмяМодуля = "оду_ОбщийПовтИсп" Тогда
	//	
	//	ПутьПоУмолчанию = "\\pivo.local\Resource\Личные\Кириллов ПС\r\work\";
	//	ПутьПоУмолчанию = ПутьПоУмолчанию + ИмяМодуля + ".epf";

	//	Если НастройкиТекущейБД.ЭтоРабочаяБД = Ложь Тогда
	//		ПолныйПуть = ПутьПоУмолчанию;
	//	Иначе //проверка на Использовать
	//		Если НастройкиТекущейБД.Использовать = Истина Тогда
	//			ПолныйПуть = ?(ЗначениеЗаполнено(НастройкиТекущейБД.ПутьКОбработкеОтладки), НастройкиТекущейБД.ПутьКОбработкеОтладки, ПутьПоУмолчанию);
	//		КонецЕсли; 
	//	КонецЕсли; 
	//	
	////ИначеЕсли ИмяМодуля = "пр_Общий" ИЛИ ИмяМодуля = "пр_НастройкиПовтИсп" Тогда
	////	
	////	ПутьПоУмолчанию = "\\pivo.local\Resource\Личные\Кириллов ПС\r\work\";
	////	ПутьПоУмолчанию = ПутьПоУмолчанию + ИмяМодуля + ".epf";
	////	
	//Иначе	
	//
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = ТекстЗапросаДляОпределенияИсполняемогоМетодаМодуля();
	//	
	//	Запрос.УстановитьПараметр("ИмяМодуля", ИмяМодуля);
	//	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	//	Запрос.УстановитьПараметр("ИмяМетода", ИмяМетода);
	//	
	//	РЗ = Запрос.Выполнить();
	//	
	//	//Если РЗ.Пустой() Тогда
	//	//	НастройкиТекущейБД = пр_НастройкиПовтИсп.НастройкиРегистрации();
	//	//КонецЕсли; 
	//	
	//	ВДЗ = РЗ.Выбрать();
	//	
	//	Если ВДЗ.Следующий() Тогда
	//		//Использовать = ВДЗ.Использовать;
	//		ПолныйПуть = ?(ЗначениеЗаполнено(ВДЗ.ПутьКОбработкеОтладки), ВДЗ.ПутьКОбработкеОтладки, ВДЗ.ОбщийПутьКОтладкиБД + "\" + ИмяМодуля + ".epf");
	//	КонецЕсли;
	//
	//КонецЕсли; 
	//
	//Если ПолныйПуть <> "" Тогда
	//	ИсполняемыйМодуль = пр_Общий.ПолучитьВнешнююОбработкуПоПути(ПолныйПуть);		
	//Иначе 
	//	ИсполняемыйМодуль = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
	//КонецЕсли; 	

	//Возврат ИсполняемыйМодуль;
	
КонецФункции 
 
Функция ПолучитьИмяИнформационнойБазы(ПолноеИмя = Ложь)	Экспорт
	Возврат пр_Общий.ПолучитьИмяИнформационнойБазы(ПолноеИмя);
КонецФункции 

Функция ИДКонфигурации() Экспорт
	
	Возврат пр_Общий.ИДКонфигурации();
	
КонецФункции // ИДКонфигурации()

Функция ПрефиксЭтойИБ()  Экспорт
	Возврат Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить();
КонецФункции 

//ПримерИспользования:
//ОбработкаОтладки = оду_ОбщийПовтИсп.ОбработкаОтладки("оду_Общий");
//Если ОбработкаОтладки <> Неопределено Тогда
//	ОбработкаОтладки.ОбменДаннымиУТ_УТАП_ПроверитьЗарегистрироватьИзменения(Источник, Отказ, РежимЗаписи, РежимПроведения);
//	Возврат;
//КонецЕсли; 
Функция ОбработкаОтладки(ИмяМодуля, РежимОтладкиМетода = Неопределено)   Экспорт
	
	ОбработкаОтладки = пр_Общий.ОбработкаОтладки(ИмяМодуля, РежимОтладкиМетода);
	Возврат ОбработкаОтладки;
	
КонецФункции 
 
//TODO: 
//Могут быть разные ТипыОбъектов: 
//Пример:
//СправочникСсылка.астКонтрагентыЕГАИС
//СправочникСсылка.алкКлассификаторОрганизацийЕГАИС
//Создать мх сопоставления объектов (РС)
//Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Стр.ТипОбъекта);
//пока просто отправляем без проверки
Функция МенеджерОбъектаПоПолномуИмени(Знач ИмяТипаОбъекта) Экспорт
	
	Если ИмяТипаОбъекта = "Документ.ПоступлениеТоваровУслуг" Тогда
		ИмяМенеджера = "Документ.ПриобретениеТоваровУслуг";
	ИначеЕсли ИмяТипаОбъекта = "Справочник.алкКлассификаторОрганизацийЕГАИС" Тогда
		ИмяМенеджера = "Справочник.астКонтрагентыЕГАИС";
	Иначе
		ИмяМенеджера = ИмяТипаОбъекта;
	КонецЕсли;
		
	Попытка
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяМенеджера);
	Исключение
		Менеджер = Неопределено;
	КонецПопытки;
	
	Возврат  Менеджер;
	
КонецФункции

#КонецОбласти

Функция ТекущийПользователь()  Экспорт
	Возврат Пользователи.ТекущийПользователь();	
КонецФункции 

#Область  РолиПрава

Функция ЕстьДоступПроводитьДокументыСозданныеНеВЭтойБазе(Пользователь)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ПользователиДополнительныеРеквизиты.Значение, ЛОЖЬ) КАК Разрешено
		|ИЗ
		|	Справочник.Пользователи.ДополнительныеРеквизиты КАК ПользователиДополнительныеРеквизиты
		|ГДЕ
		|	ПользователиДополнительныеРеквизиты.Ссылка = &Ссылка
		|	И ПользователиДополнительныеРеквизиты.Свойство = &Свойство";
	
	Свойство = пр_НастройкиПовтИсп.СвойствоПользователяРазрешеноМенятьОбъекты();
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Запрос.УстановитьПараметр("Ссылка", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если  РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;	
	КонецЕсли; 
	
	ВДЗ = РезультатЗапроса.Выбрать();
	ВДЗ.Следующий();
	
	Если ВДЗ.Разрешено = Истина Тогда
		Возврат ПраваРазработчика();
	КонецЕсли; 
	
	Возврат Ложь;	
	
КонецФункции 

Функция ПраваРазработчика()  Экспорт

	Возврат Пользователи.РолиДоступны("пр_Разработчк1С");

КонецФункции // ПраваРазработчика()

//ЕстьПравоОператоПервичкиСклад 
// Использ. в ОбработкаКорректировкаВычерковВРазрезеПричинВычерков
// Для ограничений
//
// Параметры:
//  ИмяСвойства  - <ПВХ.ДополнительныеРеквизитыИСведения> Имя свойства
//                 пример: ("Оператор первички склад")
//  Пользователь  - <Справочник.Пользователи> 
//
// Возвращаемое значение:
//   Булево   - <описание возвращаемого значения>
//
Функция ЕстьПраво(ИмяСвойства = "", Пользователь = Неопределено, Свойство  = Неопределено)   Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();	
	КонецЕсли; 
	
	Если Свойство = Неопределено Тогда
		Свойство = пр_НастройкиПовтИсп.СвойствоПВХПоИмени(ИмяСвойства);
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ПользователиДополнительныеРеквизиты.Значение, ЛОЖЬ) КАК ЕстьПраво
		|ИЗ
		|	Справочник.Пользователи.ДополнительныеРеквизиты КАК ПользователиДополнительныеРеквизиты
		|ГДЕ
		|	ПользователиДополнительныеРеквизиты.Ссылка = &Пользователь
		|	И ПользователиДополнительныеРеквизиты.Свойство = &Свойство";
	
	
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ВДЗ = РезультатЗапроса.Выбрать();
	
	Если ВДЗ.Следующий() Тогда
	 	Возврат	ВДЗ.ЕстьПраво; 
	КонецЕсли; 
	
КонецФункции

#КонецОбласти

#Область  Свойства_ПВХ

Функция СвойствоПользователяРазрешеноМенятьОбъекты()   Экспорт
	Свойство = пр_Общий.СсылкаПоGUID(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения, "f901838a-e30a-11ec-83ed-ac1f6b8732b0");
	Возврат Свойство;
КонецФункции 

Функция СвойствоПВХПоИмени(ИмяСвойства)   Экспорт
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства);
	Возврат Свойство;
КонецФункции 

#КонецОбласти

#Область  Типы

Функция ТипСтрока() Экспорт
    Возврат Тип("Строка");
КонецФункции

Функция ТипДата() Экспорт
    Возврат Тип("Дата");
КонецФункции

Функция ТипФайл() Экспорт
    Возврат Тип("Файл");
КонецФункции

Функция ТипСтруктура() Экспорт
    Возврат Тип("Структура");
КонецФункции

Функция ТипНеопределено() Экспорт
    Возврат Тип("Неопределено");
КонецФункции

Функция ТипУникальныйИдентификатор() Экспорт
    Возврат Тип("УникальныйИдентификатор");
КонецФункции

Функция ТипЭлементСпискаЗначений() Экспорт 
    Возврат Тип("ЭлементСпискаЗначений");
КонецФункции

Функция ТипСписокЗначений() Экспорт 
    Возврат Тип("СписокЗначений");
КонецФункции

Функция ТипТабличныйДокумент() Экспорт 
    Возврат Тип("ТабличныйДокумент");
КонецФункции

Функция ТипМассив() Экспорт 
    Возврат Тип("Массив");
КонецФункции

#КонецОбласти
 