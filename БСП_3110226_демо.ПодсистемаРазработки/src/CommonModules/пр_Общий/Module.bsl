// ОМ.пр_общий

#Область ПрограммныйИнтерфейс

Функция ПолучитьСтруктуруАдресаИнформационнойБазы()  Экспорт
	
	СтрСоединенияИБ = СтрокаСоединенияИнформационнойБазы();
	НачалоИмениИБ = СтрНайти(СтрСоединенияИБ,"Ref=");
	ЭтоСерверноеПодключение = ?(СтрНайти(СтрСоединенияИБ, "Srvr"), Истина, Ложь);
	
	СерверИБ = Сред(СтрСоединенияИБ, 7 ,НачалоИмениИБ - 9);  
	Если СерверИБ = "localhost" Тогда
		СерверИБ = IPПК(); 
	КонецЕсли;
	
	ИмяИБ = Сред(СтрСоединенияИБ, НачалоИмениИБ + 4,СтрДлина(СтрСоединенияИБ) - НачалоИмениИБ - 4);
	ИмяИБ = СтрЗаменить(ИмяИБ, """", "");
	
	//Результат = Новый Структура("СерверИБ, ИмяИБ, ЭтоСерверноеСоединение, ЭтоРабочаяБД", 
	//	СерверИБ, ИмяИБ, ЭтоСерверноеПодключение, оду_ОбщийПовтИсп.ЭтаРабочаяБД()); 
	Результат = Новый Структура("СерверИБ, ИмяИБ, ЭтоСерверноеСоединение", 
		СерверИБ, ИмяИБ, ЭтоСерверноеПодключение); 
	
	Возврат  Результат;

КонецФункции // ()  

Функция IPПК() Экспорт
	
	MACAddress = Неопределено;
	ИПАдрес = "";
	ServicesSet = ПолучитьCOMОбъект("winmgmts:\\localhost\root\cimv2");
	MyItems = ServicesSet.ExecQuery("Select * From Win32_NetworkAdapterConfiguration Where IPEnabled = True");
	Для Каждого MyItem Из MyItems Цикл
		MACAddress = MyItem.MACAddress;
		Если ЗначениеЗаполнено(MACAddress) Тогда
			IPAddress = Неопределено;
			Для Каждого IPAddress Из MyItem.IPAddress Цикл
				Если ЗначениеЗаполнено(IPAddress) Тогда
					Возврат IPAddress;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

//СтрокаСоединенияИнформационнойБазы()	= "Srvr="at-sql5";Ref="ytaptest6";
// ИмяИБ = "ytaptest6"
Функция ПолучитьИмяИнформационнойБазы(ПолноеИмя = Ложь)  Экспорт
	
	СтруктАдресаИБ = ПолучитьСтруктуруАдресаИнформационнойБазы();
	Если ПолноеИмя = Ложь Тогда
		ИмяИБ = СтруктАдресаИБ.ИмяИБ;
	Иначе
		//"Srvr="at-sql3";Ref="ut"
		ИмяИБ = СтрШаблон("Srvr=%1;Ref=%2", СтруктАдресаИБ.СерверИБ, СтруктАдресаИБ.ИмяИБ);
	КонецЕсли; 
	
	Возврат  ИмяИБ;

КонецФункции // ()

Функция ИДКонфигурации() Экспорт
	
	МетаданныеИмя = Метаданные.Имя;
	Если МетаданныеИмя = "БухгалтерияПредприятия" ИЛИ МетаданныеИмя = "БухгалтерияПредприятияБазовая" ИЛИ МетаданныеИмя = "Общепит1С" ИЛИ МетаданныеИмя = "БИТРесторан" Тогда
		Возврат "БП";
	ИначеЕсли МетаданныеИмя = "ЗарплатаИУправлениеПерсоналом" ИЛИ МетаданныеИмя = "ЗарплатаИУправлениеПерсоналомБазовая" ИЛИ МетаданныеИмя = "ЗарплатаИУправлениеПерсоналомКОРП" Тогда
		Возврат "ЗУП";
	ИначеЕсли Лев(МетаданныеИмя, 19) = "УправлениеТорговлей" ИЛИ МетаданныеИмя = "АгентПлюсУправлениеТорговлей" ИЛИ МетаданныеИмя = "УправлениеПредприятием" ИЛИ МетаданныеИмя = "КомплекснаяАвтоматизация" Тогда
		МетаданныеСиноним = Метаданные.Синоним;
		РедакцияКонфигурации = Прав(СокрЛП(МетаданныеСиноним), 4);
		Возврат "УТ";
	ИначеЕсли МетаданныеИмя = "KT2000_Alcohol_Trade" Тогда	
		Возврат "УТАП";	
	ИначеЕсли МетаданныеИмя = "Розница" Тогда
		Возврат "Р";
	ИначеЕсли МетаданныеИмя = "КомплекснаяАвтоматизация" ИЛИ МетаданныеИмя = "УправлениеПроизводственнымПредприятием" Тогда
		Возврат "КА";
	ИначеЕсли МетаданныеИмя = "БухгалтерияБюджетногоУчреждения" ИЛИ МетаданныеИмя = "БухгалтерияБюджетногоУчрежденияБазовая" Тогда
		Возврат "ББУ";
	ИначеЕсли МетаданныеИмя = "БухгалтерияГосударственногоУчреждения" ИЛИ МетаданныеИмя = "БухгалтерияГосударственногоУчрежденияБазовая" Тогда
		Возврат "БГУ";
	ИначеЕсли МетаданныеИмя = "ЗарплатаИКадрыБюджетногоУчреждения" ИЛИ МетаданныеИмя = "БазоваяФункциональностьКадрыЗарплата" Тогда
		Возврат "ЗБУ";
	ИначеЕсли МетаданныеИмя = "БухгалтерияПредприятияКОРП" Тогда
		Возврат "БПКОРП";
	ИначеЕсли МетаданныеИмя = "БухгалтерияАвтономногоУчрежденияКОРП" Тогда
		Возврат "БАУКОРП";
	ИначеЕсли МетаданныеИмя = "БухгалтерияАвтономногоУчреждения" ИЛИ МетаданныеИмя = "БухгалтерияАвтономногоУчрежденияБазовая" Тогда
		Возврат "БАУ";
	ИначеЕсли Лев(МетаданныеИмя, 8) = "Трактиръ" Тогда
		Возврат "ТЪ"; 
	ИначеЕсли МетаданныеИмя = "УправлениеНебольшойФирмой" ИЛИ МетаданныеИмя = "УНФУправлениеПредприятиемОбщепита" Тогда
		Возврат "УНФ";	
	Иначе
		Возврат МетаданныеИмя;
	КонецЕсли;
	
КонецФункции // ИДКонфигурации()

Функция СтруктураКлиентскогоПриложения()  Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураДанных = Новый Структура();          
	
	СистемнаяИнформация = Новый СистемнаяИнформация; 
	СтруктураДанных.Вставить("ВерсияПлатформы", СистемнаяИнформация.ВерсияПриложения);	 
	СтруктураДанных.Вставить("ВерсияКонфигурации", Метаданные.Версия);
	
	ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	СтруктураДанных.Вставить("ВерсияБСП", ВерсияБСП);	
	
	//ВерсииПодсистем = ОбновлениеИнформационнойБазы.ВерсииПодсистем();
	ИдентификаторКонфигурации = ОбщегоНазначения.ИдентификаторИнтернетПоддержкиКонфигурации();
	СтруктураДанных.Вставить("ИДКонфигурации", ИдентификаторКонфигурации);
	Возврат   СтруктураДанных;
	
КонецФункции

#Область  ВнешниеОбработки

Функция ЭтоПутьОбработки(Путь)  Экспорт
	Возврат Прав(Путь, 3) = "epf";
КонецФункции 

Процедура ПроверитьЭтоОбработка(Путь, Обработка)
	Если Обработка = Истина Тогда
		Обработка = ЭтоПутьОбработки(Путь);
	КонецЕсли; 
КонецПроцедуры
 

Процедура СоздатьВнешнююОбработкуПоПути(Путь, БезопастныйРежим = Ложь, ЗащитыОтОпасныхДействий = Ложь, Обработка = Истина)  Экспорт
		
	Если СтрНайти(Путь, "W:")  Тогда
		Путь = СтрЗаменить(Путь, "W:", "\\pivo.local\Resource\Личные\Кириллов ПС");
	КонецЕсли;
	
	ОписаниеЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий;
	ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = ЗащитыОтОпасныхДействий;
	Если Обработка = Истина Тогда
		ВнешняяОбработка = ВнешниеОбработки.Создать(Путь, БезопастныйРежим, ОписаниеЗащиты); // См. параметры открытия обработки
	Иначе
		ВнешняяОбработка = ВнешниеОтчеты.Создать(Путь, БезопастныйРежим, ОписаниеЗащиты); // См. параметры открытия обработки
	КонецЕсли; 
	
КонецПроцедуры

Функция ПолучитьВнешнююОбработкуПоПути(Путь, БезопастныйРежим = Ложь, ЗащитыОтОпасныхДействий = Ложь, Обработка = Истина)  Экспорт
	
	ПолныйПуть = Путь;
	Если СтрНайти(ПолныйПуть, "W:")  Тогда
		ПолныйПуть = СтрЗаменить(ПолныйПуть, "W:", "\\pivo.local\Resource\Личные\Кириллов ПС");
	КонецЕсли;
	
	ПроверитьЭтоОбработка(ПолныйПуть, Обработка);
		
	ОписаниеЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий;
	ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = ЗащитыОтОпасныхДействий;
	Если Обработка = Истина Тогда
		ВнешняяОбработка = ВнешниеОбработки.Создать(ПолныйПуть, БезопастныйРежим, ОписаниеЗащиты); // См. параметры открытия обработки
	Иначе
		ВнешняяОбработка = ВнешниеОтчеты.Создать(ПолныйПуть, БезопастныйРежим, ОписаниеЗащиты); // См. параметры открытия обработки
	КонецЕсли;
	
	Возврат  ВнешняяОбработка;
	
КонецФункции

Функция ВыполнитьМетодМодуля(Путь, ИмяМетода, БезопастныйРежим = Ложь, ЗащитыОтОпасныхДействий = Ложь, П0 = Null, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null, П6 = Null, П7 = Null, П8 = Null, П9 = Null)  Экспорт
	
	Перем Результат;
	
	ВнОбработка = ПолучитьВнешнююОбработкуПоПути(Путь, БезопастныйРежим = Ложь, ЗащитыОтОпасныхДействий = Ложь);
	
	ИмяМетодаСПараметрами = МетодСПараметрамиПоИмени(ИмяМетода);
	ТекстДляВыполнения = "ВнОбработка." + ИмяМетодаСПараметрами;
	
	//Пример: Обработка.ВыполнитьОбменСУТ(ТипОбъекта, ПараметрКоманды, "ytaptest6");
	//не выполняет в режиме безопастный режим = ЛОжь
	Выполнить(ТекстДляВыполнения);
	
	Возврат Результат;
	
КонецФункции 

//ПримерВызова из модуля внешней обработки:
//МассивПараметров = Новый Массив;   
//МассивПараметров.Добавить(СтруктураЗапроса.ПутьКОбработкеПриемник);
//МассивПараметров.Добавить("ВыполнитьВТранзакцииФоне(МассивСотрудников, МассивСотрудниковУдалить)");
//МассивПараметров.Добавить(Неопределено);   
//МассивПараметров.Добавить(Неопределено);
//МассивПараметров.Добавить(МассивСотрудников);
//МассивПараметров.Добавить(МассивСотрудниковУдалить);
//ИмяМетода = "пр_Общий.ВыполнитьМетодФункцииМодуля";     
//ФоновыеЗадания.Выполнить(ИмяМетода, МассивПараметров, "", НаименованиеФоновогоЗадания);
Функция ВыполнитьМетодФункцииМодуля(Путь, ИмяМетода, БезопастныйРежим = Ложь, ЗащитыОтОпасныхДействий = Ложь, П0 = Null, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null, П6 = Null, П7 = Null, П8 = Null, П9 = Null)  Экспорт
	
	Перем Результат;
	
	ВнОбработка = пр_Общий.ПолучитьВнешнююОбработкуПоПути(Путь, БезопастныйРежим = Ложь, ЗащитыОтОпасныхДействий = Ложь);
	
	ИмяМетодаСПараметрами = МетодСПараметрамиПоИмени(ИмяМетода);
	ТекстДляВыполнения = "ВнОбработка." + ИмяМетодаСПараметрами;
	
	//Пример: Обработка.ВыполнитьОбменСУТ(ТипОбъекта, ПараметрКоманды, "ytaptest6");
	//не выполняет в режиме безопастный режим = ЛОжь
	Выполнить("Результат = " + ТекстДляВыполнения);
	
	Возврат Результат;
	
КонецФункции


//ИмяМетода = СтрШаблон("%1(ИмяМодуля, Пользователь, ИмяМетода)", ИмяМетодаКоманды);
Функция ВыполнитьМетодВнешнейОбработкиПоПути(Путь, ИмяМетода, БезопастныйРежим = Ложь, ЗащитыОтОпасныхДействий = Ложь, П0 = Null, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null, П6 = Null, П7 = Null, П8 = Null, П9 = Null)  Экспорт
	
	Перем Результат;
	
	ВнОбработка = ПолучитьВнешнююОбработкуПоПути(Путь, БезопастныйРежим = Ложь, ЗащитыОтОпасныхДействий = Ложь);
	
	ИмяМетодаСПараметрами = МетодСПараметрамиПоИмени(ИмяМетода);
	ТекстДляВыполнения = "ВнОбработка." + ИмяМетодаСПараметрами;
	
	//Пример: Обработка.ВыполнитьОбменСУТ(ТипОбъекта, ПараметрКоманды, "ytaptest6");
	//не выполняет в режиме безопастный режим = ЛОжь
	Выполнить(ТекстДляВыполнения);
	
	Возврат Результат;
	
КонецФункции

//Подключение обработки или отчета БСП
Функция ПодключитьВнешнююОбработкуБСП(ИмяДопОбработки = "", СсылкаВнешнейОбработки = Неопределено)  Экспорт
	
	Если ЗначениеЗаполнено(СсылкаВнешнейОбработки) Тогда
		ДопОбработкаСсылка = СсылкаВнешнейОбработки;
	ИначеЕсли СсылкаВнешнейОбработки = Неопределено И ЗначениеЗаполнено(ИмяДопОбработки)  Тогда
		ДопОбработкаСсылка = СсылкаВнешнейОбработкаБСП(ИмяДопОбработки);
	Иначе 
		Возврат  Неопределено;
	КонецЕсли; 
	
	ИмяВнешнейОбработки = ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(ДопОбработкаСсылка);
	Возврат  ИмяВнешнейОбработки;
	
КонецФункции

//Получение обработки или отчета БСП
Функция ВнешняяОбработкаБСП(ИмяДопОбработки = "", СсылкаВнешнейОбработки = Неопределено)  Экспорт
	
	Если ЗначениеЗаполнено(СсылкаВнешнейОбработки) Тогда
		ДопОбработкаСсылка = СсылкаВнешнейОбработки;
	ИначеЕсли ИмяДопОбработки <> "" Тогда
		ДопОбработкаСсылка = СсылкаВнешнейОбработкаБСП(ИмяДопОбработки);
	Иначе
		Возврат  Неопределено;
	КонецЕсли;  
	
	ВерсияБСП = Лев(пр_НастройкиПовтИсп.ВерсияБСП(), 3);
	
	Если ВерсияБСП > "2.2" Тогда
		ВнешняяОбработка = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(ДопОбработкаСсылка);
	Иначе
		ВнешняяОбработка = ДополнительныеОтчетыИОбработки.ПолучитьОбъектВнешнейОбработки(ДопОбработкаСсылка);
	КонецЕсли; 
	
	Возврат  ВнешняяОбработка;
	
КонецФункции

//Получение обработки или отчета БСП
Функция СсылкаВнешнейОбработкаБСП(ИмяДопОбработки)  Экспорт
	ДопОбработкаСсылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ИмяДопОбработки);
	Возврат  ДопОбработкаСсылка;
КонецФункции

Функция ВыполнитьМетодФункцииПоИмени(ИмяМетода, МенеджерОбработки = Неопределено, П0 = Null, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null, П6 = Null, П7 = Null, П8 = Null, П9 = Null) Экспорт 
	
	Перем Результат;
	
	ИмяМетодаСПараметрами = МетодСПараметрамиПоИмени(ИмяМетода);
	
	Выполнить("Результат = " + ИмяМетодаСПараметрами);
	
	Возврат Результат;
	
КонецФункции

Функция МетодСПараметрамиПоИмени(ИмяМетода)
	
	НачальныйНомерСтрокиПараметров = СтрНайти(ИмяМетода, "(");
	
	ИмяМетодаСПараметрами = Лев(ИмяМетода, НачальныйНомерСтрокиПараметров);
	ТекстПараметров = Сред(ИмяМетода,НачальныйНомерСтрокиПараметров, СтрДлина(ИмяМетода) - НачальныйНомерСтрокиПараметров - 1);
	
	Если ТекстПараметров = "" Тогда
		Возврат  ИмяМетодаСПараметрами + ")";
	КонецЕсли;
	
	МассивПараметров = СтрРазделить(ТекстПараметров, ",");
	
	Для НомерПараметра = 0 По МассивПараметров.ВГраница() Цикл
		ИмяМетодаСПараметрами = ИмяМетодаСПараметрами + "П" + НомерПараметра + ",";		
	КонецЦикла; 
	
	ИмяМетодаСПараметрами = Лев(ИмяМетодаСПараметрами, СтрДлина(ИмяМетодаСПараметрами) - 1) + ")";
	
	Возврат  ИмяМетодаСПараметрами;

КонецФункции 

Функция ВыполнитьМетодОткрытойОбработки(ОбъектОбработки, ИмяМетода)  Экспорт
	ОбъектОбработка = ДанныеФормыВЗначение(ОбъектОбработки, Тип("ДанныеФормыСтруктура"));
	Результат = ВыполнитьМетодФункцииПоИмени("ОбъектОбработка." + ИмяМетода);
	Возврат  Результат;
КонецФункции

Функция ВыполнитьМетодМодуляПоСтруктуре(Путь, ИмяМетода, ПараметрыОбработки, БезопастныйРежим = Ложь, ЗащитыОтОпасныхДействий = Ложь, П0 = Null, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null, П6 = Null, П7 = Null, П8 = Null, П9 = Null)  Экспорт
//Функция ВыполнитьМетодФункцииПоСтруктуре(ИмяМетода, МенеджерОбработки = Неопределено, П0 = Null, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null, П6 = Null, П7 = Null, П8 = Null, П9 = Null) Экспорт 

	Перем Результат;
	
	ВнОбработка = ПолучитьВнешнююОбработкуПоПути(Путь, БезопастныйРежим = Ложь, ЗащитыОтОпасныхДействий = Ложь);
	
	ИмяМетодаСПараметрами = МетодСПараметрамиПоСтруктуре(ИмяМетода, ПараметрыОбработки, П0, П1, П2, П3, П4, П5, П6, П7, П8, П9);
	ТекстДляВыполнения = "ВнОбработка." + ИмяМетодаСПараметрами;
	
	Выполнить(ТекстДляВыполнения);
	
	Возврат Результат;
	
КонецФункции

Функция МетодСПараметрамиПоСтруктуре(ИмяМетода, ПараметрыОбработки, П0 = Null, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null, П6 = Null, П7 = Null, П8 = Null, П9 = Null)
	
	ИмяМетодаСПараметрами = ИмяМетода + "(";
	
	Сч = 0;
	Для каждого КлючЗначение Из ПараметрыОбработки Цикл
		ИмяПараметра = "П" + Сч;
		Значение = КлючЗначение.Значение;;
		//пока тупо
		Если ИмяПараметра = "П0" Тогда
			П0 = Значение;
		ИначеЕсли ИмяПараметра = "П1" Тогда 
			П1 = Значение;
		ИначеЕсли ИмяПараметра = "П2" Тогда 
			П2 = Значение;
		ИначеЕсли ИмяПараметра = "П3" Тогда 
			П3 = Значение;
		ИначеЕсли ИмяПараметра = "П4" Тогда 
			П4 = Значение;
		ИначеЕсли ИмяПараметра = "П5" Тогда 
			П5 = Значение;
		ИначеЕсли ИмяПараметра = "П6" Тогда 
			П6 = Значение;
		ИначеЕсли ИмяПараметра = "П7" Тогда 
			П7 = Значение;
		ИначеЕсли ИмяПараметра = "П8" Тогда 
			П9 = Значение;
		ИначеЕсли ИмяПараметра = "П9" Тогда 
			П9 = Значение;
		КонецЕсли; 
		
		//[ИмяПараметра] = КлючЗначение.Значение; 
		ИмяМетодаСПараметрами = ИмяМетодаСПараметрами + "П" + Сч + ",";		
		Сч = Сч + 1;
	КонецЦикла; 
	
	//КолПараметров = ПараметрыОбработки.Количество() - 1;
	// 
	//Для НомерПараметра = 0 По КолПараметров Цикл
	//	ИмяМетодаСПараметрами = ИмяМетодаСПараметрами + "П" + НомерПараметра + ",";		
	//КонецЦикла;
	
	ИмяМетодаСПараметрами = Лев(ИмяМетодаСПараметрами, СтрДлина(ИмяМетодаСПараметрами) - 1) + ")";
	
	Возврат  ИмяМетодаСПараметрами;

КонецФункции 

#КонецОбласти

#Область  РаботаЗапросов

//РЗ - РезультатЗапроса Или ВыборкаИзРезультатаЗапроса 
Функция СтруктураПоЗапросу(РЗ)	Экспорт
	
	Если ТипЗнч(РЗ) = Тип("РезультатЗапроса") Тогда
		
		Если РЗ.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли; 
		
		ВДЗ = РЗ.Выбрать();
		КолонкиРезультата = РЗ.Колонки;
		
	ИначеЕсли ТипЗнч(РЗ) = Тип("ВыборкаИзРезультатаЗапроса")  Тогда
		ВДЗ = РЗ; 
		КолонкиРезультата = ВДЗ.Владелец().Колонки;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПоЗапросу = Новый Структура(); 
	Для каждого Стр Из КолонкиРезультата Цикл
		СтруктураПоЗапросу.Вставить(Стр.Имя);	
	КонецЦикла; 
	
	Если ВДЗ.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПоЗапросу, ВДЗ); 
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат  СтруктураПоЗапросу;
	
КонецФункции 


//ИмяКлюча = "ГУИД" - Будет преобразован в XMLСтрока
Функция СоответвиеПоЗапросу(РЗ, ИмяКлюча = "", ИмяЗначенияКлюча = "", ЗначениеПоУмолчанию = Неопределено, ИмяКлючаПоУмолчанию = "ПоУмолчанию")	Экспорт
	
	СоответвиеПоЗапросу = Новый Соответствие;
	Если  ЗначениеПоУмолчанию <> Неопределено Тогда
		СоответвиеПоЗапросу.Вставить(ИмяКлючаПоУмолчанию, ЗначениеПоУмолчанию);
	КонецЕсли; 
	
	Если ТипЗнч(РЗ) = Тип("РезультатЗапроса") Тогда
		
		Если РЗ.Пустой() Тогда
			Возврат СоответвиеПоЗапросу;
		КонецЕсли; 
		
		ВДЗ = РЗ.Выбрать();
		КолонкиРезультата = РЗ.Колонки;
		
	ИначеЕсли ТипЗнч(РЗ) = Тип("ВыборкаИзРезультатаЗапроса")  Тогда
		ВДЗ = РЗ; 
		
		Если ВДЗ.Количество() = 0 Тогда
			Возврат СоответвиеПоЗапросу;
		КонецЕсли; 
		
		КолонкиРезультата = ВДЗ.Владелец().Колонки;
	Иначе 
		Возврат СоответвиеПоЗапросу;
	КонецЕсли;
	
	КолСвойств = 0;
	СтруктураПоЗапросу = Новый Структура(); 
	Для каждого Стр Из КолонкиРезультата Цикл
		Если Стр.Имя = ИмяКлюча Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураПоЗапросу.Вставить(Стр.Имя);
		КолСвойств = КолСвойств + 1;
	КонецЦикла; 
	
	ЭтоМассивСвойств = КолСвойств > 1;	
	
	Пока ВДЗ.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоЗапросу, ВДЗ); 
		
		Если ИмяКлюча = "ГУИД" Тогда
			Ключ = XMLСтрока(ВДЗ[ИмяЗначенияКлюча]);
		Иначе 	
			Ключ = ВДЗ[ИмяКлюча];
		КонецЕсли;
		
		Если ЭтоМассивСвойств = Истина Тогда
			СоответвиеПоЗапросу.Вставить(Ключ, СтруктураПоЗапросу); 
		Иначе	
			СоответвиеПоЗапросу.Вставить(Ключ, ВДЗ[ИмяЗначенияКлюча]); 
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат  СоответвиеПоЗапросу;
	
КонецФункции 

//TODO:  
// УровеньИтогов - Число  - Уровень группировки
// ТипОбходаРЗ    - ОбходРезультатаЗапроса - Если Неопредлено и Уровень > 0, по умолчанию ПоГруппировкам
// ТипСтруктуры - Булево - Определяет в массиве будет тип Структуры или соответсвие, по умолчанию структура
// Сериализовать - Булево - Признак перевода значения ссылочных полей в строки
Функция МассивСтруктурПоЗапросу(РЗ, ТипОбходаРЗ = Неопределено, ТипСтруктуры = Истина, Сериализовать = Ложь)	Экспорт
	
	УровеньИтогов = 0;
	Если ТипОбходаРЗ <> Неопределено Тогда
		УровеньВыборкиЗапроса(РЗ, УровеньИтогов, ТипОбходаРЗ);
		УровеньИтогов = УровеньИтогов - 2; // Коллекция начинается с 0, -1 простая выгрузка
	КонецЕсли;
	
	Если ТипЗнч(РЗ) = Тип("РезультатЗапроса") Тогда
		
		Если РЗ.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли; 
		
		//УровеньВыборкиЗапроса(РЗ, УровеньИтогов, ТипОбходаРЗ);

		//Если УровеньИтогов = 0 Тогда
		Если ТипОбходаРЗ = Неопределено Тогда	
			ВДЗ = РЗ.Выбрать();
		Иначе
			ВДЗ = РЗ.Выбрать(ТипОбходаРЗ);
		КонецЕсли; 
		
		КолонкиРезультата = РЗ.Колонки;
		
	ИначеЕсли ТипЗнч(РЗ) = Тип("ВыборкаИзРезультатаЗапроса")  Тогда
		
		Если РЗ.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли; 
		
		ВДЗ = РЗ;
		
		//УровеньВыборкиЗапроса(РЗ, УровеньИтогов, ТипОбходаРЗ);
		
		КолонкиРезультата = ВДЗ.Владелец().Колонки;
		
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
	//Поля результирующей структуры
	СтруктураПоЗапросу = Новый Структура(); 
	Для каждого Стр Из КолонкиРезультата Цикл
		СтруктураПоЗапросу.Вставить(Стр.Имя);	
	КонецЦикла; 
	
	//Наполнеие структуры
	//Если УровеньИтогов = 0 Тогда
	Если ТипОбходаРЗ = Неопределено Тогда
		МассивСтруктурПоЗапросу = СоздатьМассивСтруктурПоЗапросу(ВДЗ, СтруктураПоЗапросу);
	Иначе
		МассивСтруктурПоЗапросу = Новый Массив;
		Пока ВДЗ.Следующий() Цикл
			ИмяГруппировки = ВДЗ.Группировка();
			ДанныеВыборки = СоздатьСтруктуруРекурсивно(ВДЗ, УровеньИтогов, ИмяГруппировки, ТипОбходаРЗ, СтруктураПоЗапросу, ТипСтруктуры);
			Если ТипСтруктуры = Истина Тогда
				СтруктураЗапроса = Новый Структура(ИмяГруппировки, ДанныеВыборки);
			Иначе
				СтруктураЗапроса = Новый Соответствие();
				СтруктураЗапроса.Вставить(ВДЗ[ИмяГруппировки], ДанныеВыборки);
			КонецЕсли; 
			МассивСтруктурПоЗапросу.Добавить(СтруктураЗапроса);	
		КонецЦикла;
	КонецЕсли; 
	
	Возврат МассивСтруктурПоЗапросу;
	
КонецФункции  

Функция УровеньВыборкиЗапроса(РЗ, УровеньИтогов, ТипОбходаРЗ)
	
	Выборка = РЗ.Выбрать(ТипОбходаРЗ);
	Если Выборка.Следующий() Тогда
		УровеньИтогов = УровеньИтогов + 1;
		УровеньвыборкиЗапроса(Выборка, УровеньИтогов, ТипОбходаРЗ);
	КонецЕсли;
	
КонецФункции 

Функция СоздатьСтруктуруРекурсивно(ВДЗ, УровеньИтогов, ИмяГруппировки, ТипОбходаРЗ, СтруктураПоЗапросу, ТипСтруктуры)
	
	Если ВДЗ.Уровень() <> УровеньИтогов Тогда
		
		МассивСтруктурПоЗапросу = Новый Массив;
		НовВыборка = ВДЗ.Выбрать(ТипОбходаРЗ);
		Пока НовВыборка.Следующий() Цикл
			
			ТекИмяГруппировки = НовВыборка.Группировка();
			
			ДанныеВыборки = СоздатьСтруктуруРекурсивно(НовВыборка, УровеньИтогов, ТекИмяГруппировки, ТипОбходаРЗ, СтруктураПоЗапросу, ТипСтруктуры);
			//СтруктураГруппы = Новый Структура(ТекИмяГруппировки, ДанныеВыборки);
			
			Если ТипСтруктуры = Истина Тогда
				СтруктураГруппы = Новый Структура(ТекИмяГруппировки, ДанныеВыборки);
			Иначе
				СтруктураГруппы = Новый Соответствие();
				СтруктураГруппы.Вставить(НовВыборка[ТекИмяГруппировки], ДанныеВыборки);
			КонецЕсли;
			
			МассивСтруктурПоЗапросу.Добавить(СтруктураГруппы);	
		КонецЦикла; 
		
	Иначе
		НовВыборка = ВДЗ.Выбрать();
		МассивСтруктурПоЗапросу = СоздатьМассивСтруктурПоЗапросу(НовВыборка, СтруктураПоЗапросу);
		//СтруктураГруппы = Новый Структура(ИмяГруппировки, ДанныеВыборки);
	КонецЕсли; 
	
	Возврат МассивСтруктурПоЗапросу;
	
КонецФункции 

Функция СоздатьМассивСтруктурПоЗапросу(ВДЗ, СтруктураПоЗапросу)
	
	МассивСтруктурПоЗапросу = Новый Массив;
	Пока ВДЗ.Следующий() Цикл
		СтруктураЗапроса = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(СтруктураПоЗапросу));
		ЗаполнитьЗначенияСвойств(СтруктураЗапроса, ВДЗ); 
		МассивСтруктурПоЗапросу.Добавить(СтруктураЗапроса);	
	КонецЦикла;
	
	Возврат МассивСтруктурПоЗапросу;
	
КонецФункции 


// Выгружает запрос в строку XML, которую можно вставить в Консоль запросов.
//   Для переноса запроса и всех его параметров в Консоль запросов, необходимо вызвать функцию в окне.
//   «Вычислить выражение»(Shift + F9), скопировать полученный XML в поле "Текст запроса"
//   консоли запросов и выполнить команду "Заполнить из XML" из меню "Еще".
//   Подробнее об использование функции смотрите в справке к консоли запросов.
//
// Параметры:
//   Запрос - Запрос - запрос, который необходимо выгрузить в формат строки XML.
//
// Возвращаемое значение:
//   Строка - строка в формате XML, которую можно извлечь при помощи метода "ОбщегоНазначения.ЗначениеИзСтрокиXML".
//       После извлечения получится объект типа "Структура" с полями:
//       * Текст     - Строка - текст запроса.
//       * Параметры - Структура - параметры запроса.
//
Функция ЗапросВСтрокуXML(Запрос, ВБуфер = Ложь, ПолныйПутьКФайлу = "") Экспорт
	
	Структура = Новый Структура("Текст, Параметры, МВТ");
	ЗаполнитьЗначенияСвойств(Структура, Запрос);
	Если Запрос.МенеджерВременныхТаблиц <> Неопределено Тогда
		МВТ = ПолучитьВсеТаблицыМВТ(Запрос.МенеджерВременныхТаблиц);
	КонецЕсли; 
	Структура.МВТ = ЗначениеВСтрокуВнутр(МВТ);
	//Возврат Неопределено;
	
	Результат = ОбщегоНазначения.ЗначениеВСтрокуXML(Структура);
	
	Если ВБуфер = Ложь Тогда
		Возврат Результат;
	Иначе
		ТекстовыйФайл = Новый ТекстовыйДокумент;
		ТекстовыйФайл.УстановитьТекст(Результат);
		Если ПолныйПутьКФайлу = "" Тогда
			ПутьВр = ПолучитьИмяВременногоФайла(".txt"); 
		Иначе 	
			ПутьВр = ПолныйПутьКФайлу; 
		КонецЕсли; 
		Путь = Лев(ПутьВр, СтрНайти(ПутьВр, "\", НаправлениеПоиска.СКонца)) + "ЗапросВСтрокуXML.txt";
		ТекстовыйФайл.Записать(Путь);
		Возврат Путь;
	КонецЕсли; 
	
КонецФункции

Функция ПолучитьВсеТаблицыМВТ(МВТ) 
	
	МассивМВТ = Новый Массив;
			   
	Для каждого ВТ Из МВТ.Таблицы Цикл
		СтМВТ = Новый Структура("ПолноеИмя, Данные, КолВо");
		СтМВТ.ПолноеИмя  = ВТ.ПолноеИмя;
		//СтМВТ.Данные	 = ВТ.ПолучитьДанные(); //РезультатЗапроса - нельзя добавить к МВТ
		СтМВТ.Данные	 = ВТ.ПолучитьДанные().Выгрузить(); 
		СтМВТ.КолВо	 	 = СтМВТ.Данные.Количество(); 
		МассивМВТ.Добавить(СтМВТ);
	КонецЦикла; 
	
	Возврат МассивМВТ;
	
КонецФункции 

Функция ДополнитьМВТ(МВТ, МассивТаблиц) Экспорт 
	
	Для каждого СтрТаблицы  Из МассивТаблиц Цикл
		
		ДанныеТаблицы = ЗначениеИзСтрокиВнутр(СтрТаблицы.Значение);
		ИмяТаблицы  = СтрТаблицы.ПолноеИмя;
		
		ИменаКолонок = Новый Массив;
		Для Каждого Колонка Из ДанныеТаблицы.Колонки Цикл
			ИменаКолонок.Добавить(Колонка.Имя);
		КонецЦикла;
		ИменаКолонок = СтрСоединить(ИменаКолонок, ",");
		
		ТекстЗапроса = "ВЫБРАТЬ %1 ПОМЕСТИТЬ %2 ИЗ &ТЗ КАК ТЗ";
		ТекстЗапроса = СтрШаблон(ТекстЗапроса, ИменаКолонок, ИмяТаблицы);
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МВТ;
		Запрос.УстановитьПараметр("ТЗ", ДанныеТаблицы);
		Запрос.Выполнить();
	
	КонецЦикла; 
	
КонецФункции 

#КонецОбласти
 
#Область  ПолучениеДанныхИБ

//ВидРезультата:
//		"ВДЗ" - Выборка
//		"Структура" - Структура
//		"Массив" - Массив структур
//		"ТЗ" - ТаблицаЗначений
Функция ДанныеИБПоСсылкам(МассивСсылокНаОбъектНач, ПоляЗаполнения, ИмяТипа = "", ВидРезультата = "ВДЗ")  Экспорт
	
	Попытка
		
		Если ТипЗнч(МассивСсылокНаОбъектНач) <> пр_НастройкиПовтИсп.ТипМассив() Тогда
			МассивСсылокНаОбъект = Новый Массив;
			МассивСсылокНаОбъект.Добавить(МассивСсылокНаОбъектНач);
		Иначе 
			МассивСсылокНаОбъект = МассивСсылокНаОбъектНач;
		КонецЕсли;
		
		МассивПолей = СтрРазделить(ПоляЗаполнения, ",");
		ЗапросТекст =
		"Выбрать 
			|	ОбъектОбмена.Ссылка КАК Ссылка," + Символы.ПС;
		
		Для каждого ИмяПоля Из МассивПолей Цикл
			//Текст = СтрШаблон("ЕСТЬNULL(ОбъектОбмена.%1, Неопределено) КАК %1,", СокрЛП(ИмяПоля));
			Текст = СтрШаблон("ЕСТЬNULL(ОбъектОбмена.%1, """") КАК %1,", СокрЛП(ИмяПоля));
			ЗапросТекст = ЗапросТекст + Текст + Символы.ПС;
		КонецЦикла; 
		
		ЗапросТекст = Лев(ЗапросТекст, СтрДлина(ЗапросТекст) - 2) + Символы.ПС;
		ЗапросТекст = ЗапросТекст + "ПОМЕСТИТЬ ВТ_ОбъектыОбмена" + Символы.ПС; 
		
		Если ИмяТипа = "" Тогда
			ИмяТипа = XMLТипЗнч(МассивСсылокНаОбъект[0]).ИмяТипа;
		КонецЕсли;
		
		МассивМетаданных = СтрРазделить(ИмяТипа, ".", Ложь);
		ИмяТипаМетаданных = СтрЗаменить(МассивМетаданных[0], "Ref", "");		
		Текст = СтрШаблон("ИЗ %1.%2 КАК ОбъектОбмена", ИмяТипаМетаданных, МассивМетаданных[1]);
		ЗапросТекст = ЗапросТекст + Текст + Символы.ПС;
		
		ЗапросТекст = ЗапросТекст + "ГДЕ ОбъектОбмена.Ссылка В (&МассивСсылокНаОбъект)";
		ЗапросТекст = ЗапросТекст + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	*
			|ИЗ
			|	ВТ_ОбъектыОбмена КАК ВТ_ОбъектыОбмена
			|";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ЗапросТекст;
		
		Запрос.УстановитьПараметр("МассивСсылокНаОбъект", МассивСсылокНаОбъект);
		
		УстановитьПривилегированныйРежим(Истина);
		РЗ = Запрос.Выполнить();
		Если РЗ.Пустой() Тогда
			Возврат "Нет данных по входящим параметрам";	
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ВидРезультата = "ВДЗ" Тогда
			Возврат РЗ.Выбрать();	
		ИначеЕсли ВидРезультата = "Структура" Тогда
			Возврат СтруктураПоЗапросу(РЗ);
		ИначеЕсли ВидРезультата = "Массив" Тогда
			Возврат МассивСтруктурПоЗапросу(РЗ);
		Иначе
			Возврат РЗ.Выгрузить();
		КонецЕсли; 	
		
	Исключение
		Возврат ОписаниеОшибки();	
	КонецПопытки;
	
КонецФункции 

Функция ЗначениеРеквизитаПоСсылке(Ссылка, ИмяРеквизита) Экспорт
	
	МассивСсылокНаОбъект = Новый Массив;
	МассивСсылокНаОбъект.Добавить(Ссылка);
	ВДЗ = ДанныеИБПоСсылкам(МассивСсылокНаОбъект, ИмяРеквизита);
	
	Если ВДЗ.Следующий() Тогда
		Возврат ВДЗ[ИмяРеквизита];	
	Иначе
		Возврат Неопределено;	
	КонецЕсли; 
	
КонецФункции 

#КонецОбласти

#Область  РаботаСКоллекциями

//ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураДанныхУведомления, СтруктрураДанныхЗапроса, Ложь);
// Не проверяет на заполненность - затирает все, либо не заполнеят
// Дополняет коллекцию СтруктураПриемник значениями из коллекции СтруктураИсточник.
//
// Параметры:
//   СтруктураПриемник - Структура - Коллекция, в которую будут добавляться новые значения.
//   СтруктураИсточник - Структура - Коллекция, из которой будут считываться пары Ключ и Значение для заполнения.
//   СЗаменой - Булево, Неопределено - Что делать в местах пересечения ключей источника и приемника.
//       - Истина - Заменять значения приемника (самый быстрый способ).
//       - Ложь   - Не заменять значения приемника (пропускать).
//       - Неопределено - Значение по умолчанию. Бросать исключение.
//
Процедура ДополнитьСтруктуру(СтруктураПриемник, СтруктураИсточник, СЗаменой = Неопределено) Экспорт
	
	ИскатьКлюч = (СЗаменой = Ложь Или СЗаменой = Неопределено);
	Для Каждого КлючИЗначение Из СтруктураИсточник Цикл
		Ключ = КлючИЗначение.Ключ;
		Если ИскатьКлюч И СтруктураПриемник.Свойство(Ключ) Тогда
			Если СЗаменой = Ложь Тогда
				Если ЗначениеЗаполнено(СтруктураПриемник[Ключ]) Тогда
					Продолжить;
				КонецЕсли; 
			Иначе
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Пересечение структур источника и приемника по ключу ""%1"".'"),
					КлючИЗначение.Ключ);
			КонецЕсли
		КонецЕсли;
		СтруктураПриемник.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

//СписокСвойств - При заполнении формы из структуры через метод  ЗаполнитьЗначенияСвойств(,); 
Процедура ДобавитьСписокСвойстВСтруктуру(СтруктураДанных)  Экспорт
	
	СписокСвойств = "";
	Для каждого КлючЗначение Из СтруктураДанных  Цикл
		СписокСвойств = СписокСвойств + КлючЗначение.Ключ + ",";
	КонецЦикла; 
	СписокСвойств = ?(СписокСвойств = "", "", Лев(СписокСвойств, СтрДлина(СписокСвойств)-1));
	СтруктураДанных.Вставить("СписокСвойств", СписокСвойств);
	
КонецПроцедуры

#КонецОбласти
 
#Область  ДинамическоеИзменениеКомпиляцииКода

Функция ТекстЗапросаДляОпределенияИсполняемогоКода()
	
	Возврат
	
		"ВЫБРАТЬ
		|	пр_НастройкиРаботыМодулейМетодов.Модуль КАК Модуль,
		|	пр_НастройкиРаботыМодулейМетодов.Пользователь КАК Пользователь
		|ПОМЕСТИТЬ ВТ_НастройкиМодуляМетода
		|ИЗ
		|	РегистрСведений.пр_НастройкиРаботыМодулейМетодов КАК пр_НастройкиРаботыМодулейМетодов
		|ГДЕ
		|	пр_НастройкиРаботыМодулейМетодов.Модуль = &ИмяМодуля
		|	И пр_НастройкиРаботыМодулейМетодов.Использовать = ИСТИНА
		|	И ВЫБОР
		|			КОГДА &Метод = """"
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ пр_НастройкиРаботыМодулейМетодов.Метод = &Метод
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	пр_НастройкиРаботыМодулейМетодов.Модуль КАК Модуль,
		|	пр_НастройкиРаботыМодулейМетодов.Пользователь КАК Пользователь
		|ПОМЕСТИТЬ ВТ_НастройкиМодуля
		|ИЗ
		|	РегистрСведений.пр_НастройкиРаботыМодулейМетодов КАК пр_НастройкиРаботыМодулейМетодов
		|ГДЕ
		|	пр_НастройкиРаботыМодулейМетодов.Модуль = &ИмяМодуля
		|	И пр_НастройкиРаботыМодулейМетодов.Использовать = ИСТИНА
		|	И пр_НастройкиРаботыМодулейМетодов.Метод = """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НастройкиМодуля.Модуль КАК Модуль,
		|	0 КАК Приоритет
		|ИЗ
		|	ВТ_НастройкиМодуля КАК ВТ_НастройкиМодуля
		|ГДЕ
		|	ВТ_НастройкиМодуля.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_НастройкиМодуля.Модуль,
		|	1
		|ИЗ
		|	ВТ_НастройкиМодуля КАК ВТ_НастройкиМодуля
		|ГДЕ
		|	ВТ_НастройкиМодуля.Пользователь = &Пользователь
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_НастройкиМодуля.Модуль,
		|	2
		|ИЗ
		|	ВТ_НастройкиМодуляМетода КАК ВТ_НастройкиМодуля
		|ГДЕ
		|	ВТ_НастройкиМодуля.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_НастройкиМодуля.Модуль,
		|	3
		|ИЗ
		|	ВТ_НастройкиМодуляМетода КАК ВТ_НастройкиМодуля
		|ГДЕ
		|	ВТ_НастройкиМодуля.Пользователь = &Пользователь";
	
		//"ВЫБРАТЬ
		//|	пр_НастройкиРаботыМодулейМетодов.Модуль КАК Модуль,
		//|	пр_НастройкиРаботыМодулейМетодов.Метод КАК Метод,
		//|	пр_НастройкиРаботыМодулейМетодов.Пользователь КАК Пользователь,
		//|	пр_НастройкиРаботыМодулейМетодов.Использовать КАК Использовать
		//|ПОМЕСТИТЬ ВТ_НастройкиМодуля
		//|ИЗ
		//|	РегистрСведений.пр_НастройкиРаботыМодулейМетодов КАК пр_НастройкиРаботыМодулейМетодов
		//|ГДЕ
		//|	пр_НастройкиРаботыМодулейМетодов.Модуль = &Модуль
		//|	И пр_НастройкиРаботыМодулейМетодов.Использовать = ИСТИНА
		//|	И пр_НастройкиРаботыМодулейМетодов.Метод = &Метод
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ВТ_НастройкиМодуля.Модуль КАК Модуль,
		//|	ВТ_НастройкиМодуля.Метод КАК Метод,
		//|	0 КАК Приоритет,
		//|	ВТ_НастройкиМодуля.Использовать КАК Использовать
		//|ПОМЕСТИТЬ ВТ_ДанныеМодуля
		//|ИЗ
		//|	ВТ_НастройкиМодуля КАК ВТ_НастройкиМодуля
		//|ГДЕ
		//|	ВТ_НастройкиМодуля.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	ВТ_НастройкиМодуля.Модуль,
		//|	ВТ_НастройкиМодуля.Метод,
		//|	2,
		//|	ВТ_НастройкиМодуля.Использовать
		//|ИЗ
		//|	ВТ_НастройкиМодуля КАК ВТ_НастройкиМодуля
		//|ГДЕ
		//|	ВТ_НастройкиМодуля.Пользователь = &Пользователь
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ЕСТЬNULL(ВТ_ДанныеМодуля.Приоритет, 0) КАК Приоритет,
		//|	ЕСТЬNULL(ВТ_ДанныеМодуля.Использовать, Ложь) КАК Использовать
		//|ИЗ
		//|	(ВЫБРАТЬ
		//|		ВТ_ДанныеМодуля.Модуль КАК Модуль,
		//|		ВТ_ДанныеМодуля.Метод КАК Метод,
		//|		МАКСИМУМ(ВТ_ДанныеМодуля.Приоритет) КАК Приоритет
		//|	ИЗ
		//|		ВТ_ДанныеМодуля КАК ВТ_ДанныеМодуля
		//|	
		//|	СГРУППИРОВАТЬ ПО
		//|		ВТ_ДанныеМодуля.Модуль,
		//|		ВТ_ДанныеМодуля.Метод) КАК ВложенныйЗапрос
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеМодуля КАК ВТ_ДанныеМодуля
		//|		ПО ВложенныйЗапрос.Модуль = ВТ_ДанныеМодуля.Модуль
		//|			И ВложенныйЗапрос.Приоритет = ВТ_ДанныеМодуля.Приоритет
		//|			И ВложенныйЗапрос.Метод = ВТ_ДанныеМодуля.Метод
		//|";
	
КонецФункции 

Функция ИсполнятьКод(ИмяМодуля, Метод, Пользователь = Неопределено)  Экспорт
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаДляОпределенияИсполняемогоКода();
		//"ВЫБРАТЬ
		//|	пр_НастройкиРаботыМодулейМетодов.Использовать КАК Использовать
		//|ИЗ
		//|	РегистрСведений.пр_НастройкиРаботыМодулейМетодов КАК пр_НастройкиРаботыМодулейМетодов
		//|ГДЕ
		//|	пр_НастройкиРаботыМодулейМетодов.Модуль = &Модуль
		//|	И пр_НастройкиРаботыМодулейМетодов.Метод = &Метод
		//|	И пр_НастройкиРаботыМодулейМетодов.Пользователь = &Пользователь";
		
		Запрос.УстановитьПараметр("Метод", Метод);
		Запрос.УстановитьПараметр("ИмяМодуля", ИмяМодуля);
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		
		РЗ = Запрос.Выполнить();
		
		Возврат НЕ РЗ.Пустой();
		
		//Если РЗ.Пустой() Тогда
		//	Возврат Ложь;
		//КонецЕсли; 
		//
		//ВДЗ = РЗ.Выбрать();
		//
		//Если ВДЗ.Следующий() Тогда
		//	Возврат ВДЗ.Использовать;
		//КонецЕсли; 
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = пр_Ошибка;
		Сообщение.Сообщить(); 
		//ОтправитьСообщениеВТелеграммПетрушка("РезультатОтправкиУведомленияУниверсальное", ДокОбъект.Ссылка, пр_Ошибка, , , , , СтруктураДанныхУведомления);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции 

Функция ТекстЗапросаДляОпределенияИсполняемогоМетодаМодуля()
	Возврат
		"ВЫБРАТЬ
		|	пр_НастройкиРаботыМодулейМетодов.Модуль КАК Модуль,
		|	пр_НастройкиРаботыМодулейМетодов.Пользователь КАК Пользователь,
		|	пр_НастройкиРаботыМодулейМетодов.ПутьКОбработкеОтладки КАК ПутьКОбработкеОтладки,
		|	пр_НастройкиРаботыМодулейМетодов.ИспользоватьОбработкуБСП КАК ИспользоватьОбработкуБСП,
		|	пр_НастройкиРаботыМодулейМетодов.ОбработкаОтладкиБСП КАК ОбработкаОтладкиБСП
		|ПОМЕСТИТЬ ВТ_НастройкиМодуляМетода
		|ИЗ
		|	РегистрСведений.пр_НастройкиРаботыМодулейМетодов КАК пр_НастройкиРаботыМодулейМетодов
		|ГДЕ
		|	пр_НастройкиРаботыМодулейМетодов.Модуль = &ИмяМодуля
		|	И пр_НастройкиРаботыМодулейМетодов.Использовать = ИСТИНА
		|	И ВЫБОР
		|			КОГДА &Метод = """"
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ пр_НастройкиРаботыМодулейМетодов.Метод = &Метод
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	пр_НастройкиРаботыМодулейМетодов.Модуль КАК Модуль,
		|	пр_НастройкиРаботыМодулейМетодов.Пользователь КАК Пользователь,
		|	пр_НастройкиРаботыМодулейМетодов.ПутьКОбработкеОтладки КАК ПутьКОбработкеОтладки,
		|	пр_НастройкиРаботыМодулейМетодов.ИспользоватьОбработкуБСП КАК ИспользоватьОбработкуБСП,
		|	пр_НастройкиРаботыМодулейМетодов.ОбработкаОтладкиБСП КАК ОбработкаОтладкиБСП
		|ПОМЕСТИТЬ ВТ_НастройкиМодуля
		|ИЗ
		|	РегистрСведений.пр_НастройкиРаботыМодулейМетодов КАК пр_НастройкиРаботыМодулейМетодов
		|ГДЕ
		|	пр_НастройкиРаботыМодулейМетодов.Модуль = &ИмяМодуля
		|	И пр_НастройкиРаботыМодулейМетодов.Использовать = ИСТИНА
		|	И пр_НастройкиРаботыМодулейМетодов.Метод = """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НастройкиМодуля.Модуль КАК Модуль,
		|	ВТ_НастройкиМодуля.ПутьКОбработкеОтладки КАК ПутьКОбработкеОтладки,
		|	ВТ_НастройкиМодуля.ИспользоватьОбработкуБСП КАК ИспользоватьОбработкуБСП,
		|	ВТ_НастройкиМодуля.ОбработкаОтладкиБСП КАК ОбработкаОтладкиБСП,
		|	0 КАК Приоритет
		|ПОМЕСТИТЬ ВТ_ДанныеМодуля
		|ИЗ
		|	ВТ_НастройкиМодуля КАК ВТ_НастройкиМодуля
		|ГДЕ
		|	ВТ_НастройкиМодуля.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_НастройкиМодуля.Модуль,
		|	ВТ_НастройкиМодуля.ПутьКОбработкеОтладки,
		|	ВТ_НастройкиМодуля.ИспользоватьОбработкуБСП,
		|	ВТ_НастройкиМодуля.ОбработкаОтладкиБСП,
		|	1
		|ИЗ
		|	ВТ_НастройкиМодуля КАК ВТ_НастройкиМодуля
		|ГДЕ
		|	ВТ_НастройкиМодуля.Пользователь = &Пользователь
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_НастройкиМодуля.Модуль,
		|	ВТ_НастройкиМодуля.ПутьКОбработкеОтладки,
		|	ВТ_НастройкиМодуля.ИспользоватьОбработкуБСП,
		|	ВТ_НастройкиМодуля.ОбработкаОтладкиБСП,
		|	2
		|ИЗ
		|	ВТ_НастройкиМодуляМетода КАК ВТ_НастройкиМодуля
		|ГДЕ
		|	ВТ_НастройкиМодуля.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_НастройкиМодуля.Модуль,
		|	ВТ_НастройкиМодуля.ПутьКОбработкеОтладки,
		|	ВТ_НастройкиМодуля.ИспользоватьОбработкуБСП,
		|	ВТ_НастройкиМодуля.ОбработкаОтладкиБСП,
		|	3
		|ИЗ
		|	ВТ_НастройкиМодуляМетода КАК ВТ_НастройкиМодуля
		|ГДЕ
		|	ВТ_НастройкиМодуля.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_ДанныеМодуля.ПутьКОбработкеОтладки, """") КАК ПутьКОбработкеОтладки,
		|	ЕСТЬNULL(ВТ_ДанныеМодуля.ИспользоватьОбработкуБСП, ЛОЖЬ) КАК ИспользоватьОбработкуБСП,
		|	ЕСТЬNULL(ВТ_ДанныеМодуля.ОбработкаОтладкиБСП, НЕОПРЕДЕЛЕНО) КАК ОбработкаОтладкиБСП,
		|	ЕСТЬNULL(ВТ_ДанныеМодуля.Приоритет, 0) КАК Приоритет
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_ДанныеМодуля.Модуль КАК Модуль,
		|		МАКСИМУМ(ВТ_ДанныеМодуля.Приоритет) КАК Приоритет
		|	ИЗ
		|		ВТ_ДанныеМодуля КАК ВТ_ДанныеМодуля
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВТ_ДанныеМодуля.Модуль) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеМодуля КАК ВТ_ДанныеМодуля
		|		ПО ВложенныйЗапрос.Модуль = ВТ_ДанныеМодуля.Модуль
		|			И ВложенныйЗапрос.Приоритет = ВТ_ДанныеМодуля.Приоритет";
	
КонецФункции 

Функция ИсполняемыйМетодМодуля(ИмяМодуля, Метод = "", Пользователь = Неопределено)   Экспорт 
	
	Попытка
	
		УстановитьПривилегированныйРежим(Истина);
	
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаДляОпределенияИсполняемогоМетодаМодуля();
		
		Запрос.УстановитьПараметр("ИмяМодуля", ИмяМодуля);
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Запрос.УстановитьПараметр("Метод", Метод);
		
		РЗ = Запрос.Выполнить();
		
		Если РЗ.Пустой() Тогда
			Если Метаданные.ОбщиеМодули.Найти(ИмяМодуля) = Неопределено Тогда// ИЛИ СтрЧислоВхождений(ИмяМодуля, ".") <> 1 Тогда
				Возврат  Неопределено;
			КонецЕсли; 
			ИсполняемыйМодуль = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
			Возврат  ИсполняемыйМодуль;
		КонецЕсли; 
		
		ВДЗ = РЗ.Выбрать();
		
		Если ВДЗ.Следующий() Тогда
			Если ВДЗ.ИспользоватьОбработкуБСП И ЗначениеЗаполнено(ВДЗ.ОбработкаОтладкиБСП)  Тогда
				ИсполняемыйМодуль = пр_Общий.ВнешняяОбработкаБСП(,ВДЗ.ОбработкаОтладкиБСП);
			ИначеЕсли ЗначениеЗаполнено(ВДЗ.ПутьКОбработкеОтладки)	Тогда 
				ИсполняемыйМодуль = пр_Общий.ПолучитьВнешнююОбработкуПоПути(ВДЗ.ПутьКОбработкеОтладки);		
			Иначе
				ИсполняемыйМодуль = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
			КонецЕсли; 
		КонецЕсли;
		
		Возврат ИсполняемыйМодуль;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = пр_Ошибка;
		Сообщение.Сообщить(); 
		//ОтправитьСообщениеВТелеграммПетрушка("РезультатОтправкиУведомленияУниверсальное", ДокОбъект.Ссылка, пр_Ошибка, , , , , СтруктураДанныхУведомления);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции 

Функция ТекстЗапросаДляОпределенияИсполняемогоМодуля()
	Возврат
		"ВЫБРАТЬ
		|	пр_НастройкиРаботыМодулейМетодов.Модуль КАК Модуль,
		|	пр_НастройкиРаботыМодулейМетодов.Пользователь КАК Пользователь,
		|	пр_НастройкиРаботыМодулейМетодов.ПутьКОбработкеОтладки КАК ПутьКОбработкеОтладки,
		|	пр_НастройкиРаботыМодулейМетодов.ИспользоватьОбработкуБСП КАК ИспользоватьОбработкуБСП,
		|	пр_НастройкиРаботыМодулейМетодов.ОбработкаОтладкиБСП КАК ОбработкаОтладкиБСП
		|ПОМЕСТИТЬ ВТ_НастройкиМодуля
		|ИЗ
		|	РегистрСведений.пр_НастройкиРаботыМодулейМетодов КАК пр_НастройкиРаботыМодулейМетодов
		|ГДЕ
		|	пр_НастройкиРаботыМодулейМетодов.Модуль = &ИмяМодуля
		|	И пр_НастройкиРаботыМодулейМетодов.Использовать = ИСТИНА
		|	И пр_НастройкиРаботыМодулейМетодов.Метод = """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НастройкиМодуля.Модуль КАК Модуль,
		|	ВТ_НастройкиМодуля.ПутьКОбработкеОтладки КАК ПутьКОбработкеОтладки,
		|	ВТ_НастройкиМодуля.ИспользоватьОбработкуБСП КАК ИспользоватьОбработкуБСП,
		|	ВТ_НастройкиМодуля.ОбработкаОтладкиБСП КАК ОбработкаОтладкиБСП,
		|	0 КАК Приоритет
		|ПОМЕСТИТЬ ВТ_ДанныеМодуля
		|ИЗ
		|	ВТ_НастройкиМодуля КАК ВТ_НастройкиМодуля
		|ГДЕ
		|	ВТ_НастройкиМодуля.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_НастройкиМодуля.Модуль,
		|	ВТ_НастройкиМодуля.ПутьКОбработкеОтладки,
		|	ВТ_НастройкиМодуля.ИспользоватьОбработкуБСП,
		|	ВТ_НастройкиМодуля.ОбработкаОтладкиБСП,
		|	1
		|ИЗ
		|	ВТ_НастройкиМодуля КАК ВТ_НастройкиМодуля
		|ГДЕ
		|	ВТ_НастройкиМодуля.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_ДанныеМодуля.ПутьКОбработкеОтладки, """") КАК ПутьКОбработкеОтладки,
		|	ЕСТЬNULL(ВТ_ДанныеМодуля.ИспользоватьОбработкуБСП, ЛОЖЬ) КАК ИспользоватьОбработкуБСП,
		|	ЕСТЬNULL(ВТ_ДанныеМодуля.ОбработкаОтладкиБСП, НЕОПРЕДЕЛЕНО) КАК ОбработкаОтладкиБСП,
		|	ЕСТЬNULL(ВТ_ДанныеМодуля.Приоритет, 0) КАК Приоритет
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_ДанныеМодуля.Модуль КАК Модуль,
		|		МАКСИМУМ(ВТ_ДанныеМодуля.Приоритет) КАК Приоритет
		|	ИЗ
		|		ВТ_ДанныеМодуля КАК ВТ_ДанныеМодуля
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВТ_ДанныеМодуля.Модуль) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеМодуля КАК ВТ_ДанныеМодуля
		|		ПО ВложенныйЗапрос.Модуль = ВТ_ДанныеМодуля.Модуль
		|			И ВложенныйЗапрос.Приоритет = ВТ_ДанныеМодуля.Приоритет";
	
КонецФункции 

Функция ИсполняемыйМодуль(ИмяМодуля, Пользователь = Неопределено)   Экспорт 
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаДляОпределенияИсполняемогоМодуля();
		
		Запрос.УстановитьПараметр("ИмяМодуля", ИмяМодуля);
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		
		РЗ = Запрос.Выполнить();
		
		Если РЗ.Пустой() Тогда
			ИсполняемыйМодуль = ИсполняемыйМодульОбщегоНазначения(ИмяМодуля);
			Возврат  ИсполняемыйМодуль;
		КонецЕсли; 
		
		ВДЗ = РЗ.Выбрать();
		
		Если ВДЗ.Следующий() Тогда
			Если ВДЗ.ИспользоватьОбработкуБСП И ЗначениеЗаполнено(ВДЗ.ОбработкаОтладкиБСП)  Тогда
				ИсполняемыйМодуль = пр_Общий.ВнешняяОбработкаБСП(,ВДЗ.ОбработкаОтладкиБСП);
			ИначеЕсли ЗначениеЗаполнено(ВДЗ.ПутьКОбработкеОтладки)	Тогда 
				ИсполняемыйМодуль = пр_Общий.ПолучитьВнешнююОбработкуПоПути(ВДЗ.ПутьКОбработкеОтладки);		
			Иначе
				ИсполняемыйМодуль = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
			КонецЕсли; 
		КонецЕсли;
		
		Возврат ИсполняемыйМодуль;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		//Сообщение = Новый СообщениеПользователю;
		//Сообщение.Текст = пр_Ошибка;
		//Сообщение.Сообщить(); 
		////ОтправитьСообщениеВТелеграммПетрушка("РезультатОтправкиУведомленияУниверсальное", ДокОбъект.Ссылка, пр_Ошибка, , , , , СтруктураДанныхУведомления);
		//Возврат Неопределено;
	КонецПопытки; 
	
	Попытка
		ИсполняемыйМодуль = ИсполняемыйМодульОбщегоНазначения(ИмяМодуля);
		Возврат  ИсполняемыйМодуль;
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = пр_Ошибка;
		Сообщение.Сообщить(); 
		//ОтправитьСообщениеВТелеграммПетрушка("РезультатОтправкиУведомленияУниверсальное", ДокОбъект.Ссылка, пр_Ошибка, , , , , СтруктураДанныхУведомления);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции    

Функция ИсполняемыйМодульОбщегоНазначения(ИмяМодуля)
	
	Если Метаданные.ОбщиеМодули.Найти(ИмяМодуля) = Неопределено Тогда// ИЛИ СтрЧислоВхождений(ИмяМодуля, ".") <> 1 Тогда
		Возврат  Неопределено;
	КонецЕсли; 
	ИсполняемыйМодуль = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
	Возврат  ИсполняемыйМодуль; 
	
КонецФункции

Функция НастройкиИсполняемогоМодуля(ИмяМодуля, Пользователь = Неопределено)   Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДляОпределенияИсполняемогоМодуля();
	
	Запрос.УстановитьПараметр("ИмяМодуля", ИмяМодуля);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РЗ = Запрос.Выполнить();

	Данные = пр_Общий.СтруктураПоЗапросу(РЗ);
	Возврат Данные;
	
КонецФункции 

 
// Возвращает Информацию о задаче разработки
//	для динамического управления выполнения кода, отключения/включения задачи
//
// Параметры:
// НомерЗадачи - номер задачи по трекеру заач - Например : "2021_059"
//					Полный номер задачи: ayan#2021_059#УТАП 
//					ayan - проект задачи
//					2021 - Год создания, назначения задачи
//                  059  - Порядковый номер
//                  УТАП - Конфигурация - место разработки
//  ТекущийПользователь  - СправочникСсылка - Пользователи ИБ
//
// Возвращаемое значение: СтруктураСведенийОЗадаче:
//   Структура, Неопределено  - СтруктураСКлючами: ("Задача, Отключена, РежимОтладки, ЭтоВедущийРазработчик, ЭтоТестировщик, ЭтоРазработчик, ЭтоКонтролер, ЕстьДоступКОтладке")
Функция ИнформациОЗадаче(НомерЗадачи, ТекущийПользователь)   Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	пр_СписокЗадачРазработки.Задача.Ссылка КАК Задача,
		|	пр_СписокЗадачРазработки.Отключена КАК Отключена,
		|	пр_СписокЗадачРазработки.РежимОтладки КАК РежимОтладки,
		|	пр_СписокЗадачРазработки.Задача.ВедущийРазработчик = &ТекущийПользователь КАК ЭтоВедущийРазработчик,
		|	ЕСТЬNULL(пр_ЗадачиРазработкиТестировщики.Тестировщик, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) = &ТекущийПользователь КАК ЭтоТестировщик,
		|	ЕСТЬNULL(пр_ЗадачиРазработкиРазработчики.Разработчик, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) = &ТекущийПользователь КАК ЭтоРазработчик,
		|	пр_СписокЗадачРазработки.Задача.Контролер = &ТекущийПользователь КАК ЭтоКонтролер
		|ПОМЕСТИТЬ ВТ_ДанныеОЗадаче
		|ИЗ
		|	РегистрСведений.пр_СписокЗадачРазработки КАК пр_СписокЗадачРазработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.пр_ЗадачиРазработки.Тестировщики КАК пр_ЗадачиРазработкиТестировщики
		|		ПО (пр_ЗадачиРазработкиТестировщики.Ссылка = пр_СписокЗадачРазработки.Задача)
		|			И (пр_ЗадачиРазработкиТестировщики.Тестировщик = &ТекущийПользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.пр_ЗадачиРазработки.Разработчики КАК пр_ЗадачиРазработкиРазработчики
		|		ПО пр_СписокЗадачРазработки.Задача = пр_ЗадачиРазработкиРазработчики.Ссылка
		|			И (пр_ЗадачиРазработкиРазработчики.Разработчик = &ТекущийПользователь)
		|ГДЕ
		|	пр_СписокЗадачРазработки.Задача.Код = &Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеОЗадаче.Задача КАК Задача,
		|	ВТ_ДанныеОЗадаче.Отключена КАК Отключена,
		|	ВТ_ДанныеОЗадаче.РежимОтладки КАК РежимОтладки,
		|	ВТ_ДанныеОЗадаче.ЭтоВедущийРазработчик КАК ЭтоВедущийРазработчик,
		|	ВТ_ДанныеОЗадаче.ЭтоТестировщик КАК ЭтоТестировщик,
		|	ВТ_ДанныеОЗадаче.ЭтоРазработчик КАК ЭтоРазработчик,
		|	ВТ_ДанныеОЗадаче.ЭтоКонтролер КАК ЭтоКонтролер,
		|	ВТ_ДанныеОЗадаче.ЭтоВедущийРазработчик
		|		ИЛИ ВТ_ДанныеОЗадаче.ЭтоТестировщик
		|		ИЛИ ВТ_ДанныеОЗадаче.ЭтоРазработчик
		|		ИЛИ ВТ_ДанныеОЗадаче.ЭтоКонтролер КАК ЕстьДоступКОтладке
		|ИЗ
		|	ВТ_ДанныеОЗадаче КАК ВТ_ДанныеОЗадаче";
	
	Запрос.УстановитьПараметр("Код", НомерЗадачи);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ВДЗ = РезультатЗапроса.Выбрать();
	
	СтруктураСведенийОЗадаче = Новый Структура("Задача, Отключена, РежимОтладки, ЭтоВедущийРазработчик, ЭтоТестировщик, ЭтоРазработчик, ЭтоКонтролер, ЕстьДоступКОтладке");
	
	Если  ВДЗ.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураСведенийОЗадаче, ВДЗ); 
	КонецЕсли; 
	
	Возврат   СтруктураСведенийОЗадаче;
	
КонецФункции

#КонецОбласти

#Область  Логирование
Функция РезультатЗаписиВЛог(Лог, Метод, Объект1С = Неопределено, Ошибка = "", ТипСсылки = "", Ссылка = Неопределено, ВходящиеДанные = Неопределено, Пользователь = Неопределено, ПериодЗаписи = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		Если Пользователь = Неопределено Тогда
			Пользователь = пр_НастройкиПовтИсп.ТекущийПользователь(); 
		КонецЕсли;
		
		Если ПериодЗаписи = Неопределено Тогда
			ПериодЗаписи = ТекущаяДатаСеанса(); 
		КонецЕсли;
		
		Запись = РегистрыСведений.пр_Логи.СоздатьМенеджерЗаписи();
		Запись.Период 	= ПериодЗаписи;
		Запись.Лог		= Лог;
		Запись.Объект1С = Объект1С;
		Запись.Метод 	= Метод;
		Запись.Ошибка	= Ошибка;
		
		СсылкаТ = "";
		ТипСсылкиТ = "";
		Если Ссылка <> Неопределено Тогда
			Если ТипЗнч(Ссылка) = Тип("Строка") Тогда
				СсылкаТ = Ссылка;
				ТипСсылкиТ = ТипСсылки;
			Иначе 
				СсылкаТ = XMLСтрока(Ссылка);
				ТипСсылкиТ = ИмяТипаXMLПоСсылке(Ссылка);
			КонецЕсли; 
		КонецЕсли; 
		Запись.ТипСсылки = ТипСсылкиТ;
		Запись.Ссылка 	 = СсылкаТ;
		
		Если ВходящиеДанные <> Неопределено Тогда
			Если ТипЗнч(ВходящиеДанные) = Тип("Строка") Тогда
				Запись.ВходящиеДанные = ВходящиеДанные;
			Иначе
				Попытка
					//Запись.ВходящиеДанные = ЗначениеВСтрокуВнутр(ВходящиеДанные);
					Запись.ВходящиеДанные = пр_Общий.JSONЗаписать(ВходящиеДанные, Истина, , Истина);
				Исключение
					пр_Ошибка = ОписаниеОшибки();
					Запись.ВходящиеДанные = пр_Ошибка;
				КонецПопытки; 
			КонецЕсли; 
		КонецЕсли;
		Запись.Пользователь = Пользователь;
		Запись.Записать();
		Возврат Истина;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		Данные = ТипСсылкиТ + ":"  + СсылкаТ;
		пр_Общий.ОтправитьСообщениеВТелеграмDev(Метод, Объект1С, пр_Ошибка, , Данные, Ошибка); 
		Возврат Ложь;
	КонецПопытки; 
	
	УстановитьПривилегированныйРежим(Ложь);

КонецФункции

#КонецОбласти
 

//Проверка струкутры
Функция ЗначениеРеквизитаОбъектаМожетНеБыть(Объект, ИмяРеквизитаСвойства)	Экспорт
	
	Если Объект = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	СтруктураПоиска = Новый Структура(ИмяРеквизитаСвойства, Неопределено); 
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Объект); 
	Возврат  СтруктураПоиска[ИмяРеквизитаСвойства];
	
КонецФункции 

Функция ЗаполненноЗначениеРекизитаСвойства(Объект, ИмяРеквизитаСвойства)  Экспорт
	Возврат ЗначениеРеквизитаОбъектаМожетНеБыть(Объект, ИмяРеквизитаСвойства) <> Неопределено;	
КонецФункции 

//Требуется Ссылка и все нужные ревизиты в запросе
//РЗ - РезультатЗапроса Или ВыборкаИзРезультатаЗапроса 
Функция РезультатЗаписиДанныхЗапросаВТранзации(РЗ, СписокПолейДляЗаписи = "", СписокИсключаемыхПолей = "Ссылка", ОбменДаннымиЗагрузка = Истина, ПривилегированныйРежим = Истина, РежимОтладки = Ложь, 
												ОбъемТранзакции = 500, РежимЗаписи = Неопределено, ОтключитьСтандартныеПроверки = Ложь, ДополнительныеСвойства = Неопределено, МассивЗаписанныхОбъектов = Неопределено)	Экспорт
	
	Если ТипЗнч(РЗ) = Тип("РезультатЗапроса") Тогда
		
		Если РЗ.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли; 
		
		ВДЗ = РЗ.Выбрать();
		
	ИначеЕсли ТипЗнч(РЗ) = Тип("ВыборкаИзРезультатаЗапроса")  Тогда
		ВДЗ = РЗ;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
	
	Если ПривилегированныйРежим = Истина Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли; 
	
	//Ограничение транзакции 
	ПрерватьЦикл = Ложь; 
	
	ТекТранз = ОбъемТранзакции;
	Осч = 1;
	Сч = 1;
	
	НачатьТранзакцию();
	
	Пока ВДЗ.Следующий() И ПрерватьЦикл = Ложь Цикл
		
		Попытка
			
			//Обработка данных
			Объект = ВДЗ.Ссылка.ПолучитьОбъект();
			Если СписокПолейДляЗаписи = "" Тогда
				ЗаполнитьЗначенияСвойств(Объект, ВДЗ, , СписокИсключаемыхПолей);
			Иначе
				ЗаполнитьЗначенияСвойств(Объект, ВДЗ, СписокПолейДляЗаписи, СписокИсключаемыхПолей);
			КонецЕсли; 
			
			Если ОбменДаннымиЗагрузка = Истина Тогда
				Объект.ОбменДанными.Загрузка = Истина;
			КонецЕсли;
			
			Если ОтключитьСтандартныеПроверки = Истина Тогда
				//Оптимизация типовой УТ
				Объект.ДополнительныеСвойства.Вставить("РегистрироватьДанныеПервичныхДокументов", Ложь);
				Объект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина); 
				
				//Отключить везде регистрацию в планах обмена
				Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);  
			КонецЕсли; 
			
			Если ДополнительныеСвойства <> Неопределено Тогда
			 	Для каждого КлючЗначение Из ДополнительныеСвойства Цикл
					Объект.ДополнительныеСвойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);  
				КонецЦикла; 
			КонецЕсли; 
			
			Если РежимОтладки = Ложь Тогда
				Если РежимЗаписи = Неопределено Тогда
					Объект.Записать();
				Иначе
					Объект.Записать(РежимЗаписи);
				КонецЕсли; 
			КонецЕсли; 
			
			Если МассивЗаписанныхОбъектов <> Неопределено Тогда
				МассивЗаписанныхОбъектов.Добавить(ВДЗ.Ссылка);
			КонецЕсли; 
		Исключение
			
			пр_Ошибка = ОписаниеОшибки();
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = пр_Ошибка;
			Сообщение.Сообщить();
			МассивЗаписанныхОбъектов = Неопределено;
			
			ОтменитьТранзакцию();
			
			пр_Результат = РезультатЗаписиВЛог("ОМ.пр_Общий", "РезультатЗаписиДанныхЗапросаВТранзации", , пр_Ошибка, , ВДЗ.Ссылка);
			 
			Возврат Ложь;
		КонецПопытки;
		
		Если Сч >= ТекТранз ИЛИ Осч = ВДЗ.Количество() Тогда //Последняя запись
			//Зафиксировать транзакцию
			ЗафиксироватьТранзакцию();
			
			Если Осч <> ВДЗ.Количество() Тогда //Если запись не последняя продолжаем
				ТекТранз = ОбъемТранзакции;
				Сч = 0;
				НачатьТранзакцию();
			КонецЕсли;
			
		КонецЕсли;
	
		Сч = Сч + 1;
		Осч = Осч + 1;
		
	КонецЦикла;
	
	Возврат Истина;

КонецФункции 

#КонецОбласти


#Область  РаботаС_ССЫЛКАМИ

//МенеджерТипа - 	ОбъектМенеджер - ДокументМенеджер.ПриобретениеТоваровУслуг
Функция СсылкаПоGUID(МенеджерТипа, УникальныйИдентификаторСтрокой, ВозвращатьПустуюСсылку = Ложь)     Экспорт
	
	Попытка
		
		Если УникальныйИдентификаторСтрокой = "" Тогда
			Возврат ?(ВозвращатьПустуюСсылку = Ложь, Неопределено, МенеджерТипа.ПустаяСсылка());	
		КонецЕсли; 
		
		УникальныйИдентификатор = Новый УникальныйИдентификатор(УникальныйИдентификаторСтрокой);
		
		СсылкаНаОбъект1С = МенеджерТипа.ПолучитьСсылку(УникальныйИдентификатор);
		
		//Если СтрНайти(СсылкаНаОбъект1С, "Объект не найден") > 0 Тогда
		Если СсылкаСуществует(СсылкаНаОбъект1С) Тогда
			Возврат СсылкаНаОбъект1С;
		Иначе
			Возврат ?(ВозвращатьПустуюСсылку = Ложь, Неопределено, МенеджерТипа.ПустаяСсылка());	
		КонецЕсли; 
		
	Исключение
		Возврат ?(ВозвращатьПустуюСсылку = Ложь, Неопределено, МенеджерТипа.ПустаяСсылка());	
	КонецПопытки; 
	
КонецФункции 

//в 2-а разы быстрее функции.СсылкаПоGUID
//ИмяТипа - Строка - "DocumentRef.ПриобретениеТоваровУслуг"
Функция СсылкаПоТипXML(ИмяТипа, УникальныйИдентификаторСтрокой, НеПравильныйИД = Ложь)     Экспорт
	
	Попытка
		
		Если НЕ ЗначениеЗаполнено(ИмяТипа) Тогда
			Возврат Неопределено;	
		КонецЕсли; 
		
		Тип = ИзXMLТипа(ИмяТипа, "");
		СсылкаНаОбъект1С = XMLЗначение(Тип, УникальныйИдентификаторСтрокой);
		
		//Если СсылкаНаОбъект1С = Неопределено ИЛИ СтрНайти(Строка(СсылкаНаОбъект1С),"Объект не найден") > 0 Тогда
		Если СсылкаСуществует(СсылкаНаОбъект1С) Тогда
			Возврат СсылкаНаОбъект1С;
		Иначе
			Возврат Неопределено;	
		КонецЕсли; 
		
	Исключение
		НеПравильныйИД = Истина;
		Возврат Неопределено;	
	КонецПопытки; 
	
КонецФункции 

Функция СсылкаСуществует(СсылкаНаОбъект1С) Экспорт
	
	Попытка
		
		ИмяТипа = XMLТипЗнч(СсылкаНаОбъект1С).ИмяТипа;

	    ИмяТаблицы = СтрЗаменить(ИмяТипа, "Ref.", ".");
	    
	    ТекстЗапроса = "ВЫБРАТЬ Ссылка ИЗ [ИмяТаблицы] ГДЕ Ссылка = &Ссылка";
	    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяТаблицы]", ИмяТаблицы);
	    
	    Запрос = Новый Запрос;
	    Запрос.Текст = ТекстЗапроса;
	    Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект1С);
	    
	    УстановитьПривилегированныйРежим(Истина);
	    СсылкаСуществует = НЕ Запрос.Выполнить().Пустой();
	    УстановитьПривилегированныйРежим(Ложь);
		
	    Возврат СсылкаСуществует;
		
	Исключение
		ОтправитьСообщениеВТелеграмDev("СсылкаСуществует", СсылкаНаОбъект1С, ОписаниеОшибки());	
	    Возврат Ложь;
	КонецПопытки; 
	
КонецФункции

Функция ИмяТипаXMLПоСсылке(СсылкаНаОбъект1С) Экспорт
	
	Попытка
		ИмяТипа = XMLТипЗнч(СсылкаНаОбъект1С).ИмяТипа;
	    Возврат ИмяТипа;
		
	Исключение
	    Возврат "";
	КонецПопытки; 
	
КонецФункции

Функция ДатаСозданияСсылки(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат 0;
	КонецЕсли;	
	
	ГУИД = Ссылка.УникальныйИдентификатор();
	Строка16 = Сред(ГУИД, 16, 3) + Сред(ГУИД, 10, 4) + Сред(ГУИД, 1, 8);
	Разрядность = СтрДлина(Строка16);
	ЧислоСек = 0;
	Для Позиция = 1 По Разрядность Цикл
		ЧислоСек = ЧислоСек + Найти("123456789abcdef",Сред(Строка16,Позиция,1))*Pow(16,Разрядность - Позиция);
	КонецЦикла;
	ЧислоСек = ЧислоСек / 10000000;
	ЧислоСек = ЧислоСек + 60*60*3; //Задержка по местному времени
	Возврат Дата(1582, 10, 15, 04, 00, 00) + ЧислоСек;
		
КонецФункции

Функция ИД_Ссылки(Ссылка)  Экспорт
	Возврат XMLСтрока(Ссылка);	
КонецФункции 

Функция ПолучитьОбъектСУстановленнойСсылкой(МенеджерТипа, ГУИД = Неопределено, УникальныйИдентификаторСтрокой = "") Экспорт
	
	Если ЗначениеЗаполнено(ГУИД) Тогда
		УникальныйИдентификатор = ГУИД;		
	ИначеЕсли ЗначениеЗаполнено(УникальныйИдентификаторСтрокой) Тогда 
		УникальныйИдентификатор = Новый УникальныйИдентификатор(УникальныйИдентификаторСтрокой);
	Иначе 
		//Возврат ?(ВозвращатьПустуюСсылку = Ложь, Неопределено, МенеджерТипа.ПустаяСсылка());	
		Возврат Неопределено;
	КонецЕсли;
	
	Ссылка1С = МенеджерТипа.ПолучитьСсылку(УникальныйИдентификатор);
	
	//TODO:  возможно проверка на найденный объект
	Объект1С = МенеджерТипа.СоздатьЭлемент(); 
	Объект1С.УстановитьСсылкуНового(Ссылка1С);
	
	Возврат Объект1С;
	
КонецФункции

#Область  НавигационнойСсылки

Функция ПолучитьСсылкуИзНавигационной(НС)  Экспорт
	
	Попытка
		ПерваяТочка = Найти(НС, "e1cib/data/");
		ВтораяТочка = Найти(НС, "?ref=");
		
		ПредставлениеТипа   = Сред(НС, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
		ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
		ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(НС, ВтораяТочка + 5));
		Ссылка = ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
		
		Возврат Ссылка;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции 

#КонецОбласти
 
#КонецОбласти

//проверка строки по шаблону, источник https://infostart.ru/1c/articles/464971/     
Функция НайтиСтрокуРегуляроеВыражение(Строка, Фасет) Экспорт
	
	Чтение = Новый ЧтениеXML;
    Чтение.УстановитьСтроку(
                "<Model xmlns=""http://v8.1c.ru/8.1/xdto"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Model"">
                |<package targetNamespace=""sample-my-package"">
                |<valueType name=""testtypes"" base=""xs:string"">
                |<pattern>" + Фасет + "</pattern>
                |</valueType>
                |<objectType name=""TestObj"">
                |<property xmlns:d4p1=""sample-my-package"" name=""TestItem"" type=""d4p1:testtypes""/>
                |</objectType>
                |</package>
                |</Model>");

    Модель = ФабрикаXDTO.ПрочитатьXML(Чтение);
    МояФабрикаXDTO = Новый ФабрикаXDTO(Модель);
    Пакет = МояФабрикаXDTO.Пакеты.Получить("sample-my-package");
    Тест = МояФабрикаXDTO.Создать(Пакет.Получить("TestObj"));

    Попытка
        Тест.TestItem = Строка;
        Возврат Истина
    Исключение
        Возврат Ложь
    КонецПопытки;
    
КонецФункции

#Область  ГенерацияСлучайного

// генерирация произвольной длины символов, состоящий из Больших, малых латинских букв и чисел, например "DY80c8Yf7"
Функция СгенерироватьСлучайныйТекст(ДлинаСтроки)  Экспорт
	
	ТекстСгенерированнойСтроки = "";
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	
	Для Сч = 1 по ДлинаСтроки Цикл
        ТекстСгенерированнойСтроки = ТекстСгенерированнойСтроки + ГенерацияСлучайногоСимвола(ГСЧ);
	КонецЦикла; 
	
	Возврат ТекстСгенерированнойСтроки;
	
КонецФункции

Функция ГенерацияСлучайногоСимвола(ГСЧ)
	
	СлучайнаяСтрока = "";
	Набор = ГСЧ.СлучайноеЧисло(1,3);
	
	Если Набор = 1 Тогда
		// это число
		СлучайныйСимвол = ГСЧ.СлучайноеЧисло(0,9);    
	ИначеЕсли Набор = 2 Тогда
		// это Большая буква латиницы
		СлучайныйСимвол = Символ(ГСЧ.СлучайноеЧисло(65,90));
	ИначеЕсли Набор = 3 Тогда
		// это маленькая буква латиницы
		СлучайныйСимвол = Символ(ГСЧ.СлучайноеЧисло(97,122));
	КонецЕсли;
	СлучайнаяСтрока = СлучайнаяСтрока + СлучайныйСимвол;
	
	Возврат(СлучайнаяСтрока);
	
КонецФункции

#КонецОбласти
 

#Область  СлужебныеБСП

#Область  ЗначениеРеквизитовНаКлиенте
 
Функция ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов) Экспорт
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов);
КонецФункции 

Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
КонецФункции 

#КонецОбласти

Функция РезультатЗаписиДопСведений(ОбъектСсылка, Свойство, Значение, Удалить = Ложь) Экспорт
	
	Результат = Истина;
	
	Попытка
		
		//Регистрация чз доп сведения
		Запись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		Запись.Объект = ОбъектСсылка;
		Запись.Свойство = Свойство;
		
		Если Удалить = Истина Тогда
			Запись.Удалить();
		ИначеЕсли ЗначениеЗаполнено(ОбъектСсылка) И ЗначениеЗаполнено(Свойство) И ЗначениеЗаполнено(Значение) Тогда 
			Запись.Значение = Значение;
			Запись.Записать();
		Иначе
			Результат = Ложь;
		КонецЕсли; 
		
	Исключение
		Результат = Ложь;
	КонецПопытки;	
	
	Возврат Результат;
	
КонецФункции 

Функция РезультатЗаписиДопРеквизита(Объект, Свойство, Значение, Записывать = Истина, Удалить = Ложь)  Экспорт
	
	Результат = Истина;
	
	Попытка
		
		//Если НЕ ЗначениеЗаполнено(Объект) Тогда
		//	Возврат Ложь;
		//КонецЕсли;
		
		//TODO:  проверка на объект, ссылку
		//Если ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		//
		//КонецЕсли;
		
		ДопРеквизиты = Объект.ДополнительныеРеквизиты;
		
		МассивПоискаСтроки = ДопРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство));
		Если МассивПоискаСтроки.Количество() > 0 Тогда
			
			Запись = МассивПоискаСтроки[0];
			Если Удалить = Истина Тогда
				ДопРеквизиты.Удалить(Запись);
			ИначеЕсли  ЗначениеЗаполнено(Свойство) И ЗначениеЗаполнено(Значение) Тогда 
				Запись.Значение = Значение;
			Иначе
				Возврат Ложь;
			КонецЕсли; 
			
		ИначеЕсли Удалить = Ложь Тогда
			Запись = ДопРеквизиты.Добавить();
			Запись.Свойство = Свойство;
			Запись.Значение = Значение;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
		Если Записывать = Истина Тогда
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
			Объект.ОбменДанными.Загрузка = Ложь;
		КонецЕсли; 
		
	Исключение
		Возврат Ложь;
	КонецПопытки;	
	
	Возврат Результат;
	
КонецФункции 

#КонецОбласти


Функция Объект1СВJSON(Объект1С, ФормироватьСПереносами = Истина)  Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	Если ФормироватьСПереносами Тогда
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	Иначе
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, Символы.Таб));
	КонецЕсли; 
	
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, Объект1С, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции 

Функция ОчисткаРеквизитовОбъекта(Объект1С, ИсключенияРеквизитов = Неопределено)  Экспорт
	
	Попытка
		
		//МассивИСключений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключенияРеквизитов, ",",Истина, Истина)
		
		МетаданныеОбъекта =  Объект1С.Метаданные();
		Для каждого Реквизит  Из МетаданныеОбъекта.Реквизиты Цикл
			ИмяРеквизита = Реквизит.Имя;
			//СтрПоиска = МассивИСключений.Найти(ИмяРеквизита);
			Если СтрНайти(ИсключенияРеквизитов, ИмяРеквизита) Тогда
				Продолжить;
			КонецЕсли; 
			
			Объект1С[ИмяРеквизита] = Неопределено;	
		КонецЦикла; 
		
		Для каждого ТабличнаяЧасть  Из МетаданныеОбъекта.ТабличныеЧасти Цикл
			Объект1С[ТабличнаяЧасть.Имя].Очистить();	
		КонецЦикла; 
		
		Объект1С.Записать();
		
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции 

Функция ОчисткаЗаписейРегистраСведений(ИмяРегистра, Измерения)   Экспорт
	
	Попытка
		
		Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		
		Для каждого КлючЗначение Из Измерения Цикл
			Набор.Отбор[КлючЗначение.Ключ].Установить(КлючЗначение.Значение);
			Набор.Записать();
		КонецЦикла; 
		
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции


#Область  РаботаСФайлами  

// Сохранение во внешний файл .mxl, xls
//
// Параметры:
//  ТЗ  - ТаблицаЗначений - Таблица которую нужно записать. 
//	ПолныйПутьКФайлу - Строка  - Полный путь к файлу
//  ИмяФайла  - Строка - Имя файла, сформирует ПолныйПутьКФайлу, если не указан ПутьКФайлу.
//	ПутьККаталогу - Строка  - Путь к каталогу
//  ТипХранения - ТипФайлаТабличногоДокумента - "mxl", "xls" и тд по умолчанию - mxl 
//
Функция СохранитьТЗ(ТЗ, ПолныйПутьКФайлу = "", ИмяФайла = "", ПутьККаталогу = "", ТипХранения = Неопределено) Экспорт
	
	Попытка
		
		ПолныйПутьКФайлу = ПолныйПутьКФайлу(ПолныйПутьКФайлу, ИмяФайла, ПутьККаталогу, ТипХранения);
		Если НЕ ЗначениеЗаполнено(ПолныйПутьКФайлу) Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не определен путь к файлу";
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецЕсли;
		
		Если ТипХранения = Неопределено Тогда 
			ТипХранения = ТипФайлаТабличногоДокумента.MXL;	
		КонецЕсли;
		
		ТабДок = Новый ТабличныйДокумент;   
		Построитель = Новый ПостроительОтчета();
		Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗ);
		Построитель.ВыводитьЗаголовокОтчета = Ложь;
		Построитель.Вывести(ТабДок);
		ТабДок.Записать(ПолныйПутьКФайлу, ТипХранения)		;
		Возврат Истина;
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции  

//Загрузка из .mxl, xls
//
// Параметры:   
//	ПолныйПутьКФайлу - Строка  - Полный путь к файлу
//  ИмяФайла  - Строка - Имя файла, сформирует ПолныйПутьКФайлу, если не указан ПутьКФайлу.
//	ПутьККаталогу - Строка  - Путь к каталогу
//  ТипХранения - ТипФайлаТабличногоДокумента - "mxl", "xls" и тд по умолчанию - mxl 
//
Функция ПолучитьТЗ(ПолныйПутьКФайлу = "", ИмяФайла = "", ПутьККаталогу = "", ТипХранения = Неопределено) Экспорт
	
	Попытка
		
		ТабДок = Новый ТабличныйДокумент;
		
		ПутьКФайлу = ПолныйПутьКФайлу(ПолныйПутьКФайлу, ИмяФайла, ПутьККаталогу, ТипХранения);
		
		Если НЕ ЗначениеЗаполнено(ПутьКФайлу) Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не определен путь к файлу";
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецЕсли;
		
		ТабДок.Прочитать(ПутьКФайлу);
		
		ПЗ = Новый ПостроительЗапроса;    
		ПЗ.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабДок.Область());
		ПЗ.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
		ПЗ.ЗаполнитьНастройки();
		ПЗ.Выполнить();
		
		Возврат ПЗ.Результат.Выгрузить();
		
	Исключение
		пр_Ошибка = ОписаниеОшибки(); 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = пр_Ошибка;
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции   

//Удаляет файл  .mxl, xls
//
// Параметры:
//	ПолныйПутьКФайлу - Строка  - Полный путь к файлу
//  ИмяФайла  - Строка - Имя файла, сформирует ПолныйПутьКФайлу, если не указан ПутьКФайлу.
//	ПутьККаталогу - Строка  - Путь к каталогу
//  ТипХранения - ТипФайлаТабличногоДокумента - "mxl", "xls" и тд по умолчанию - mxl 
Функция УдалитьТЗ(ПолныйПутьКФайлу = "", ИмяФайла = "", ПутьККаталогу = "", ТипХранения = Неопределено) Экспорт
	
	Попытка
		ПолныйПутьКФайлу = ПолныйПутьКФайлу(ПолныйПутьКФайлу, ИмяФайла, ПутьККаталогу, ТипХранения);
		Если НЕ ЗначениеЗаполнено(ПолныйПутьКФайлу) Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не определен путь к файлу";
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецЕсли;
		УдалитьФайлы(ПолныйПутьКФайлу);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции  

//ТипХранения - ТипФайлаТабличногоДокумента - "mxl" , "xls" и тд  
//По умолчанию "mxl"
Функция ПолныйПутьКФайлу(ПолныйПутьКФайлу = "", ИмяФайла = "", ПутьККаталогу = "", ТипХранения = "json", СоздаватьКаталогЕслиНеСуществует = Ложь) Экспорт
		
	Если ЗначениеЗаполнено(ПолныйПутьКФайлу) Тогда
		Возврат  ПолныйПутьКФайлу;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПутьККаталогу) Тогда 
		ПутьККаталогуТек = ?(Прав(ПутьККаталогу, 1) = "\", ПутьККаталогу, ПутьККаталогу + "\");
		Если КаталогСуществует(ПутьККаталогуТек, СоздаватьКаталогЕслиНеСуществует) Тогда
			ПутьКФайлу = ПутьККаталогуТек + ИмяФайла;	
		Иначе
			Возврат  Неопределено;
		КонецЕсли; 
	Иначе // в каталог по умолчанию 
		//TODO:  Сделать регистр для хранения путей для разных пользователей  
		// тупенько 
		ИмяТекПользователя = пр_НастройкиПовтИсп.ТекущийПользователь().Наименование;
		Если ИмяТекПользователя = "Кириллов П.С." Тогда
			Каталог = "\\pivo.local\Resource\Личные\Кириллов ПС\Буфер";
		Иначе
			Возврат  Неопределено;
		КонецЕсли;
		
		ПутьКФайлу = Каталог + ИмяФайла;	
	
	КонецЕсли; 
	
	//Для других вариантов, например в exel	
	//Если ЗначениеЗаполнено(ТипХранения) Тогда
		ПутьКФайлу = ПутьКФайлу + "." + Строка(ТипХранения);		
	//Иначе //По умолчанию 
	//	ПутьКФайлу = ПутьКФайлу + ".mxl";		
	//КонецЕсли;
	
	Возврат  ПутьКФайлу;
	
КонецФункции

Функция ФайлСуществует(ПутьКФайлу) Экспорт
	ТекФайл = Новый Файл(ПутьКФайлу);	
	Возврат ТекФайл.Существует();
КонецФункции

//Функция Проверяет наличие каталога на диске и предлагает создать, если каталога не существует.
//
// Параметры
//  ПутьККаталогу  – Строка, содержащая путь к каталогу файла на диске.
//
// Возвращаемое значение:
//   Булево – Истина, если каталог существует или создан, Ложь, если каталога нет.
//
Функция КаталогСуществует(ПутьККаталогу, СоздаватьКаталогЕслиНеСуществует = Истина) Экспорт
	
	Попытка
		
		КаталогНаДиске = Новый Файл(ПутьККаталогу);
		Если КаталогНаДиске.Существует() Тогда
			Возврат Истина;
		ИначеЕсли  СоздаватьКаталогЕслиНеСуществует = Истина Тогда
			СоздатьКаталог(ПутьККаталогу);
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	Исключение
		Возврат Ложь;
	КонецПопытки; 
	
КонецФункции

Функция ПоказатьТаблицуОбъемовВидеоФайловНаСервере(МестоПапки = "") Экспорт 
	
	ОбъемВидеоРесурса = Новый ТаблицаЗначений;
	ОбъемВидеоРесурса.Колонки.Добавить("Имя", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ОбъемВидеоРесурса.Колонки.Добавить("Путь",  ОбщегоНазначения.ОписаниеТипаСтрока(777));
	ОбъемВидеоРесурса.Колонки.Добавить("Продолжительность", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ОбъемВидеоРесурса.Колонки.Добавить("Минут",  ОбщегоНазначения.ОписаниеТипаЧисло(15,3,ДопустимыйЗнак.Неотрицательный));
						
	//ОбъемВидеоРесурса.Очистить();
	
	Маски = Новый Массив;
	Маски.Добавить("*.mp4");
	Маски.Добавить("*.avi");   
	Маски.Добавить("*.mkv");   
	
	Для каждого Маска  Из Маски Цикл
		
		МассивФайловКаталога = НайтиФайлы(МестоПапки, Маска, Истина);
		
		Для каждого ЭлементМассива Из МассивФайловКаталога Цикл  
			ПолученныеСведения = ПолучитьСведенияОФайле(ЭлементМассива.ПолноеИмя, "Продолжительность;Размер;Size;Дата;Имя;Дата изменения");
			Нстр = ОбъемВидеоРесурса.Добавить();
			НСтр.Имя = ЭлементМассива.Имя; 
			НСтр.Путь = ЭлементМассива.Путь;
			НСтр.Продолжительность = "01.01.0001 " + ПолученныеСведения["Продолжительность"]; 
			НСтр.Минут = Минута(НСтр.Продолжительность) + Секунда(НСтр.Продолжительность)/60; 
		КонецЦикла;
		
	КонецЦикла; 
	
	//Элементы.ОбъемВидеоРесурсаПродолжительность.ТекстПодвала = Окр(ОбъемВидеоРесурса.Итог("Минут")/60, 2);
	ОбъемВидеоРесурса.Сортировать("Путь, Имя");
	Возврат   ОбъемВидеоРесурса;
	
КонецФункции       

Функция ИмяФайлаПоПути(ПутьКФайлу)  Экспорт
	Попытка
		МассивыПути = СтрРазделить(ПутьКФайлу, "/\");
		ИмяФайла = МассивыПути[МассивыПути.ВГраница()];
		Возврат СтрРазделить(ИмяФайла, ".")[0];
	Исключение
		Возврат "";
	КонецПопытки; 
КонецФункции 


#Область ПолучитьДопСведенияОФайлах 

// Выделяет подстроку по разделителю
// В стандартных конфигурациях 1С имеется подобная функция, добавил сюда только для универсальности
Функция Выделить(Стр, Разд=";")
    Поз = Найти(Стр, Разд);
    Если Поз = 0 Тогда
        Рез = Стр;
        Стр = "";
    Иначе
        Рез = Лев(Стр, Поз - 1);
        Стр = Сред(Стр, Поз + СтрДлина(Разд));
    КонецЕсли;
    Возврат Рез;
КонецФункции

// Удаляет из строки спецсимволы юникода и преобразует строку в число
Функция ЗначениеВЧисло(Знач Зн)  Экспорт
    Пока Зн <> "" Цикл
        Если Найти("0123456789", Лев(Зн, 1)) = 0 Тогда
            Зн = Сред(Зн, 2);
        ИначеЕсли Найти("0123456789", Прав(Зн, 1)) = 0 Тогда
            Зн = Лев(Зн, СтрДлина(Зн) - 1);
        Иначе
            Прервать;
        КонецЕсли;
    КонецЦикла;
    Возврат ?(Зн="", 0, Число(Зн));
КонецФункции

//TODO:  Раскомментировать в модуле внешней обработки 
//Пример:
//D:\1С Труд\ERP\! Внешние\В_Отчеты\gs_erp_Отч_29_ЭлектронныйАдресРасчетныхЛистков.erf..gs_erp_Отч_29_ЭлектронныйАдресРасчетныхЛистков.МодульОбъекта

//Перем СписокСвойствФайла, WshShell, objShellApp; // Храним для сокращения времени обработки нескольких файлов подряд

// Возвращает объект Соответствие со списком всех ненулевых свойств файла или Неопределено - если свойства определить не получилось
// СписокСвойств - может содержать список необходимых свойств, разделенных точкой с запятой ";"
// Если указано всего одно свойство, то будет возвращено полученное значение, а не список значений!
// Например: ПолучитьСведенияОФайле("c:\windows\notepad.exe", "Версия продукта");
Функция ПолучитьСведенияОФайле(ПутьДоФайла, Знач СписокСвойств = Неопределено)
//	
//	Файл = Новый Файл(ПутьДоФайла);
//    Если Файл.Существует() Тогда
//        Если WshShell = Неопределено Тогда
//            WshShell              = Новый COMОбъект("WScript.Shell");
//            objShellApp            = Новый COMОбъект("Shell.Application");
//        КонецЕсли;
//        objFolder                = objShellApp.NameSpace(Файл.Путь);
//        objItem                    =    objFolder.ParseName(Файл.Имя); 
//        Рез                        = Новый Соответствие;
//        Если СписокСвойствФайла = Неопределено Тогда
//            СписокСвойствФайла    = Новый Соответствие;
//            Для К=0 По 300 Цикл
//                ИмяСвойства        = СокрЛП(objFolder.GetDetailsOf(NULL, К));
//                Если ИмяСвойства <> "" Тогда
//                    СписокСвойствФайла.Вставить(ИмяСвойства, К);
//                    Если СписокСвойств = Неопределено Тогда
//                        Значение = objFolder.GetDetailsOf(objItem,К);
//                        Если Значение <> "" Тогда
//                            Рез.Вставить(ИмяСвойства, Значение);
//                        КонецЕсли;
//                    КонецЕсли;
//                КонецЕсли;
//            КонецЦикла;
//            Если СписокСвойств = Неопределено Тогда
//                Возврат Рез;
//            КонецЕсли;
//        КонецЕсли;
//        Если СписокСвойств = Неопределено Тогда
//            Для Каждого Эл Из СписокСвойствФайла Цикл
//                Значение = objFolder.GetDetailsOf(objItem, Эл.Значение);
//                Если Значение <> "" Тогда
//                    Рез.Вставить(Эл.Ключ, Значение);
//                КонецЕсли;
//            КонецЦикла;
//        Иначе
//            Пока СписокСвойств<>"" Цикл
//                Имя = Выделить(СписокСвойств);
//                Поз    = СписокСвойствФайла.Получить(Имя);
//                Значение = ?(Поз = Неопределено, Неопределено, objFolder.GetDetailsOf(objItem, Поз));
//                Если СписокСвойств = "" И Рез.Количество() = 0 Тогда
//                    Возврат Значение;
//                КонецЕсли;
//                Рез.Вставить(Имя, Значение);
//            КонецЦикла;
//        КонецЕсли;
//        Возврат ?(Рез.Количество()=0, Неопределено, Рез);
//    КонецЕсли;
    Возврат Неопределено;
КонецФункции

// В качестве примера, получение размеров изображения
Функция ПолучитьРазмерыИзображения(ПутьДоФайла)
    Рез = Новый Структура("Высота,Ширина", 0, 0);
    Зн = ПолучитьСведенияОФайле(ПутьДоФайла, "Размеры");
    Если Зн <> Неопределено Тогда
        Рез.Ширина = ЗначениеВЧисло(СокрЛП(Выделить(Зн, "x")));
        Рез.Высота = ЗначениеВЧисло(СокрЛП(Зн));
    КонецЕсли;
    Возврат Рез;
КонецФункции	

#КонецОбласти 


#Область  Ексель
///////////////////////////////////
// Работа с Excel через ТабДок

// Функция - Прочитать excel
//
// Параметры:
//  ФайлExcel - Файл, Строка     - Объект Файл или полное имя файла.
//  ФункцияОбработкиСтрок     - Строка, Неопределено     - Шаблон выражения для обработки строковых значений ячеек. 
// ВСтруктуре 					- Булево - Выбор получения данных (Структура или Список значений)
// МетодПолученияТЗ 			- Булево - Выбор ТаблицаЗначений или ТабличныйДокумент
//    В шаблоне производится подстановка - вместо символа ? будет подставляться обрабатываемое значение строки.
//    Если передать Неопределено или пустую строку, то обработка производиться не будет.
//  МаксШирина                 - Число - Максимальное кол-во колонок, просматриваемых при усечении таблицы по ширине.
//  ОграничиватьСверху         - Булево - Убирать пустые строки сверху
//  ОграничиватьСлева         - Булево - Убирать пустые строки слева
//  ОграничиватьСнизу         - Булево - Убирать пустые строки снизу
//  ОграничиватьСправа         - Булево - Убирать пустые строки справа
// 
// Возвращаемое значение:
//  СписокЗначений - Список значений содержимого. Элементы списка в поле Значение содержат ячейки листа (объект ОбластьЯчеекТабличногоДокумента), в поле Представление - имя листа
//
Функция ПрочитатьExcel(ФайлExcel, ВСтруктуре = Истина, МетодПолученияТЗ = Истина, ФункцияОбработкиСтрок = "СокрЛП(?)",
        ОграничиватьСверху = Истина, ОграничиватьСлева = Истина, ОграничиватьСнизу = Истина, ОграничиватьСправа = Истина) Экспорт 
		
	Если ТипЗнч(ФайлExcel) = Тип("Файл") Тогда
		Ф = ФайлExcel;
	ИначеЕсли ТипЗнч(ФайлExcel) = Тип("Строка") Тогда
		Ф = НовыйФайл(ФайлExcel);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не корректный тип файла";
		Сообщение.Сообщить(); 
		Возврат Неопределено;
	КонецЕсли;
	
	ВесьТабДок = Новый ТабличныйДокумент();
	ВесьТабДок.Прочитать(Ф.ПолноеИмя, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	
	Если ВСтруктуре = Истина Тогда
    	Результат = Новый Структура;
	Иначе
    	Результат = Новый СписокЗначений;
	КонецЕсли;
	
    Области = ВесьТабДок.Области;
    Если Области.Количество()=0 Тогда 
        ВызватьИсключение("В файле нет областей");
    КонецЕсли;
    
    Для Каждого Обл Из Области Цикл
        ТекТабДок = Новый ТабличныйДокумент;
        ОгрОбласть = ПолучитьОграниченнуюОбласть(ВесьТабДок, Обл);
        // вставим область в табдок
        ОгрОбласть.Имя = Обл.Имя;
        ТекТабДок.ВставитьОбласть(ОгрОбласть, 
            ТекТабДок.Область(1, ОгрОбласть.Лево, ОгрОбласть.Низ - ОгрОбласть.Верх + 1, ОгрОбласть.Право)
        );
		СократитьСтроки(ТекТабДок, ФункцияОбработкиСтрок);
		
		Если МетодПолученияТЗ = Истина Тогда
			ДанныеРезультата = ПолучитьТаблицуЗначенийExcel(ТекТабДок);
		Иначе
			ДанныеРезультата = ТекТабДок;
		КонецЕсли; 
		
		Если ВСтруктуре = Истина Тогда
			Результат.Вставить(Обл.Имя, ПолучитьТаблицуЗначенийExcel(ТекТабДок));
		Иначе
			Результат.Добавить(ТекТабДок, Обл.Имя);
		КонецЕсли;
		
    КонецЦикла;
    // зачищаем исходный таб док. хз, может лишнее
    ВесьТабДок.Очистить();
    ВесьТабДок = Неопределено;
    
    Возврат Результат;
    
КонецФункции

Процедура СократитьСтроки(ТабДок, ФункцияОбработкиСтрок = "СокрЛП(?)")
    
    Если ПустаяСтрока(ФункцияОбработкиСтрок) Тогда 
        Возврат;
    КонецЕсли;
    
    Если Ложь Тогда ТабДок = Новый ТабличныйДокумент; КонецЕсли; // фейк
    
    Для Стр = 1 По ТабДок.ВысотаТаблицы Цикл 
        Для Кол = 1 По ТабДок.ШиринаСтраницы Цикл 
            ТекОбласть = ТабДок.Область(Стр, Кол);
            ТекстОбласти = ТекОбласть.Текст;
            Если Не ТекОбласть.СодержитЗначение И Не ПустаяСтрока(ТекОбласть.Текст)    Тогда 
                Выражение = СтрЗаменить(ФункцияОбработкиСтрок, "?", "ТекстОбласти");
                ТекОбласть.Текст = Вычислить(Выражение);
            КонецЕсли;
        КонецЦикла;
    КонецЦикла;
    
КонецПроцедуры

Функция ПолучитьОграниченнуюОбласть(ТабДок, ОбластьЯчеек,
    ОграничиватьСверху = Истина, ОграничиватьСлева = Истина, ОграничиватьСнизу = Истина, ОграничиватьСправа = Истина)
    
    Если Не ОграничиватьСверху И Не ОграничиватьСлева И Не ОграничиватьСправа И Не ОграничиватьСнизу Тогда 
        Возврат ОбластьЯчеек;
    КонецЕсли;
    
    Если Ложь Тогда // фейк
        ТабДок = Новый ТабличныйДокумент;
        ОбластьЯчеек = ТабДок.Области[0];
    КонецЕсли;
    
    Лево = Неопределено; Право = Неопределено; Верх = Неопределено; Низ = Неопределено;
    МаксШирина = ТабДок.ШиринаТаблицы;
    Для Стр = ОбластьЯчеек.Верх По ОбластьЯчеек.Низ Цикл
        Для Кол = 1 По МаксШирина Цикл 
            ТекОбласть = ТабДок.Область(Стр, Кол);
            Если ЭтоЗначащаяОбласть(ТекОбласть) Тогда 
                Лево = ?(Лево=Неопределено, Кол, Мин(Лево, Кол));
                Право = ?(Право=Неопределено, Кол, Макс(Право, Кол));
                Верх = ?(Верх=Неопределено, Стр, Верх);
                Низ = ?(Низ=Неопределено, Стр, Макс(Низ, Стр));
            КонецЕсли;
        КонецЦикла;
    КонецЦикла;
    
    Результат = ТабДок.Область(
        ?(ОграничиватьСверху, ?(Верх=Неопределено, ОбластьЯчеек.Верх, Верх), ОбластьЯчеек.Верх),
        ?(ОграничиватьСлева, ?(Лево=Неопределено, ОбластьЯчеек.Лево, Лево), ОбластьЯчеек.Лево),
        ?(ОграничиватьСнизу, ?(Низ=Неопределено, ОбластьЯчеек.Низ, Низ), ОбластьЯчеек.Низ),
        ?(ОграничиватьСправа, ?(Право=Неопределено, ОбластьЯчеек.Право, Право), ОбластьЯчеек.Право)
    );
    
    Возврат Результат;
    
КонецФункции

Функция ЭтоЗначащаяОбласть(ОбластьЯчеек)
    Возврат Не ПустаяСтрока(ОбластьЯчеек.Текст) 
        Или ОбластьЯчеек.Гиперссылка
        Или ОбластьЯчеек.СодержитЗначение
        //Или ОбластьЯчеек.ГраницаСверху.ТипЛинии<>ТипЛинииЯчейкиТабличногоДокумента.НетЛинии
        //Или ОбластьЯчеек.ГраницаСнизу.ТипЛинии<>ТипЛинииЯчейкиТабличногоДокумента.НетЛинии
        Или ОбластьЯчеек.ГраницаСлева.ТипЛинии<>ТипЛинииЯчейкиТабличногоДокумента.НетЛинии
        Или ОбластьЯчеек.ГраницаСправа.ТипЛинии<>ТипЛинииЯчейкиТабличногоДокумента.НетЛинии
    ;
КонецФункции

// Функция - Текст области листа
// Предполагаем, что имеем дело с ТабДоком, обрезанным по нужным размерам.
// Параметры:
//  Лист - ЭлементСпискаЗначений, ТабличныйДокумент     - Где искать текст.
//  Верх     - Число, Неопределено     - Верхняя граница области
//  Лево     - Число, Неопределено     - Левая граница области
//  Низ         - Число, Неопределено     - Нижняя граница области
//  Право     - Число, Неопределено     - Правая граница области
// 
// Возвращаемое значение:
//  Строка - Объединенный текст указанной области. Ячейки по горизонтали разделяются символом ТАБ, строки переносятся ВК
//
Функция ТекстОбластиЛиста(Лист, Знач Верх = Неопределено, Знач Лево = Неопределено, Знач Низ = Неопределено, Знач Право = Неопределено) Экспорт
    
    ТипЗнчЛист = ТипЗнч(Лист);
    Если ТипЗнчЛист = пр_НастройкиПовтИсп.ТипТабличныйДокумент() Тогда 
        ТабДок = Лист;
    ИначеЕсли ТипЗнчЛист = пр_НастройкиПовтИсп.ТипЭлементСпискаЗначений() Тогда 
        ТабДок = Лист.Значение;
    Иначе 
        ТабДок = Новый ТабличныйДокумент; // фейк
        ВызватьИсключение("Неподдерживаемый тип параметра Лист " + ТипЗнчЛист);
    КонецЕсли;
    
    Область = ТабДок.Область(Верх, Лево, Низ, Право);
    Результат = "";
    ГорРазд = Символы.Таб;
    ВертРазд = Символы.ВК;
    
    ОблЛево = ?(Область.Лево=0, 1, Область.Лево);
    ОблПраво = ?(Область.Право=0, ТабДок.ШиринаТаблицы, Мин(Область.Право, ТабДок.ШиринаТаблицы));
    ОблВерх = ?(Область.Верх=0, 1, Область.Верх);
    ОблНиз = ?(Область.Низ=0, ТабДок.ВысотаТаблицы, Мин(Область.Низ, ТабДок.ВысотаТаблицы));
    
    Для Стр=ОблВерх По ОблНиз Цикл 
        
        Для Кол=ОблЛево По ОблПраво Цикл
            
            ТекстЯчейки = ТабДок.Область(Стр, Кол).Текст;
            ЭтоПустаяЯчейка = ПустаяСтрока(ТекстЯчейки);
            
            Если ЭтоПустаяЯчейка Тогда 
                ТекстЯчейки = ГорРазд;
            КонецЕсли;
            Если Кол=ОблПраво И Стр=ОблНиз Тогда 
                Разделитель = "";
            ИначеЕсли Кол=ОблПраво Тогда
                Разделитель = ВертРазд;
            Иначе 
                Разделитель = ?(ЭтоПустаяЯчейка, "", ГорРазд);
            КонецЕсли;
            
            Результат = Результат + ТекстЯчейки + Разделитель;
                
        КонецЦикла;
        
    КонецЦикла;
    
    Возврат Результат;
    
КонецФункции

// Функция - Новый файл
// Создает или переиспользует объект Файл. Для сокращения кол-ва кода. Заодно можно делать проверку существования файла.
// Параметры:
//  Файл                     - Файл, Строка     - Если передается объект Файл, то он же и возвращается. 
//    Если передается Строка (путь), то создается Файл по переданному пути
//  ПроверятьСуществование     - Булево - Проверять ли существование файла. Если не существует, то идет вызов исключения.
// 
// Возвращаемое значение:
//  Файл - Созданный или переиспользованный файл
//
Функция НовыйФайл(Файл, ПроверятьСуществование = Истина)
    
    ТипЗнчФайл = ТипЗнч(Файл);
    Результат = Неопределено;
    Если ТипЗнчФайл = пр_НастройкиПовтИсп.ТипФайл() Тогда 
        Результат = Файл;
    ИначеЕсли ТипЗнчФайл = пр_НастройкиПовтИсп.ТипСтрока() Тогда 
        Результат = Новый Файл(Файл);
    Иначе 
        ВызватьИсключение("Непредусмотренный тип параметра Файл " + ТипЗнчФайл);
    КонецЕсли;
    
    Если ПроверятьСуществование=Истина И Не Результат.Существует() Тогда 
        ВызватьИсключение("Файл не существует");
    КонецЕсли;
    
    Возврат Результат;
    
КонецФункции

// Функция - Получить таблицу значений excel
//
// Параметры:
//  Лист - ЭлементСпискаЗначений, ТабличныйДокумент     - Где искать текст.
//  ПоляТолькоПоДокументу     - Булево - Если Истина, то создаются поля по верхней строке ТабДока. Если Ложь, то создаются авто-поля Поле[N] по всей ширине ТабДока.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - ТЗ с данными ТабДока
//
Функция ПолучитьТаблицуЗначенийExcel(Лист, ПоляТолькоПоДокументу = Истина) Экспорт
    
    Если Истина Тогда 
        ТабДок = ПолучитьТабДок(Лист);
    Иначе 
        ТабДок = Новый ТабличныйДокумент;
    КонецЕсли;
    
    Если ТабДок.ВысотаТаблицы=0 Тогда 
        Возврат Неопределено;
    КонецЕсли;
	
	//// вставим заголовки
	//Если ПоляТолькоПоДокументу=Ложь Тогда
	//    ВерхняяСтрока = ТабДок.Область("R1");
	//    ТабДок.УдалитьОбласть(ВерхняяСтрока, ТипСмещенияТабличногоДокумента.ПоВертикали);
	//КонецЕсли;
	
    // вставим заголовки
    Если ПоляТолькоПоДокументу = Ложь Тогда 
        ВерхняяСтрока = ТабДок.Область("R1");
        ТабДок.ВставитьОбласть(ВерхняяСтрока, ВерхняяСтрока, ТипСмещенияТабличногоДокумента.ПоВертикали, Ложь);
        ВерхняяСтрока = ТабДок.Область("R1");
        ВерхняяСтрока.Очистить();
        Для Кол=1 По ТабДок.ШиринаТаблицы Цикл
            ТабДок.Область(1, Кол).Текст = "Поле" + Формат(Кол, "ЧГ=");
        КонецЦикла;
    КонецЕсли;
    
    ПЗ = Новый ПостроительЗапроса;
    ПЗ.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабДок.Область());
    ПЗ.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
    ПЗ.ЗаполнитьНастройки();
    ПЗ.Выполнить();
    ТаблицаЗначений = ПЗ.Результат.Выгрузить();    
    
    Возврат ТаблицаЗначений;
   
КонецФункции

Функция ПолучитьТабДок(Лист)
    
    ТипЗнчЛист = ТипЗнч(Лист);
	
	Если ТипЗнчЛист = пр_НастройкиПовтИсп.ТипТабличныйДокумент() Тогда 
        ТабДок = Лист;
    ИначеЕсли ТипЗнчЛист = пр_НастройкиПовтИсп.ТипЭлементСпискаЗначений() Тогда 
        ТабДок = Лист.Значение;
    Иначе 
        ВызватьИсключение("Неподдерживаемый тип параметра Лист " + ТипЗнчЛист);
    КонецЕсли;
    
    Возврат ТабДок;
    
КонецФункции

#КонецОбласти


#Область  ДанныеДляРазработки
 
//ЗначениеВСтрокуВнутр
Функция СохранитьДанныеВФайлДляРазработки(ПутьКФайлу, Данные) Экспорт
	
	Попытка
		
		ТекстРезультат = ЗначениеВСтрокуВнутр(Данные);
		ТекстДок = Новый ТекстовыйДокумент;
		ТекстДок.УстановитьТекст(ТекстРезультат);
		ТекстДок.Записать(ПутьКФайлу, КодировкаТекста.UTF8);
		
	Исключение
		Ошибка = ОписаниеОшибки();
		Возврат Ошибка;
	КонецПопытки;
	
	Возврат "Данные записаны в файл";
	
КонецФункции

//ЗначениеИзСтрокиВнутр
Функция ПолучитьДанныеИзФайлаДляРазработки(ПутьКФайлу) Экспорт
	
	Попытка
		ТекстДок = Новый ТекстовыйДокумент;
		ТекстДок.Прочитать(ПутьКФайлу, КодировкаТекста.UTF8);
		ТекстРезультат = ТекстДок.ПолучитьТекст();
		
		Данные = ЗначениеИзСтрокиВнутр(ТекстРезультат);
	Исключение
		Ошибка = ОписаниеОшибки();
		Возврат Ошибка;
	КонецПопытки;
	Возврат Данные;
	
КонецФункции 

#КонецОбласти


#КонецОбласти


#Область  ФоновоеВыполнение

#Область  ПроверкаЗапускаФоновогоЗадания
 
Функция ПроверитьВыполнениеФоновогоЗадания(НаименованиеЗадания)  Экспорт
	
	Задание = АктивноеЗаданиеСинхронизации(НаименованиеЗадания);
	
	Если Задание = Неопределено Тогда
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции 

Функция АктивноеЗаданиеСинхронизации(НаименованиеФоновогоЗадания)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура("Наименование, Состояние",
		НаименованиеФоновогоЗадания, СостояниеФоновогоЗадания.Активно);
		
	ИсполняющиеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор); 
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ИсполняющиеФоновыеЗадания.Количество() > 0 Тогда
		Возврат ИсполняющиеФоновыеЗадания[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Функция ФоновоеЗаданиеВыполняется(НаименованиеЗадания, ИнтерактивныйВызов = Ложь) Экспорт
	
	ЗаданиеВыполняется = пр_Общий.ПроверитьВыполнениеФоновогоЗадания(НаименованиеЗадания);
	Если ЗаданиеВыполняется = Истина Тогда
		Если ИнтерактивныйВызов = Истина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон("Фоновое задание: %1 выполняется. Подождите.", НаименованиеЗадания);
			Сообщение.Сообщить(); 
		КонецЕсли; 
	КонецЕсли;
	
	Возврат ЗаданиеВыполняется;
	
КонецФункции 

Функция ЗапуститьФоновоеВыполнение(ИмяМетода, МассивПараметров = Неопределено, ИДФоновогоЗадания = "", НаименованиеФоновогоЗадания = "", ИнтерактивныйВызов = Ложь) Экспорт
	
	Попытка
		
		Если ФоновоеЗаданиеВыполняется(НаименованиеФоновогоЗадания, ИнтерактивныйВызов) = Истина Тогда
			Возврат Неопределено;
		КонецЕсли; 
		
		//Если ИДФоновогоЗадания = "" Тогда
		//	ИДФоновогоЗадания = Новый УникальныйИдентификатор;
		//КонецЕсли;
		
		ФоновыеЗадания.Выполнить(ИмяМетода, МассивПараметров, ИДФоновогоЗадания, НаименованиеФоновогоЗадания);
		Возврат ИДФоновогоЗадания; 
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = пр_Ошибка;
		Сообщение.Сообщить(); 
		//ОтправитьСообщениеВТелеграммПетрушка("РезультатОтправкиУведомленияУниверсальное", ДокОбъект.Ссылка, пр_Ошибка, , , , , СтруктураДанныхУведомления);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции


////TODO:  Доделать
//Функция ЗапуститьФоновоеВыполнение(ТекстПроцедуры, СтруктураПараметров = Неопределено, ИДФоновогоЗадания = "", НаименованиеФоновогоЗадания = "") Экспорт
//	
//	Если ИДФоновогоЗадания = "" Тогда
//		ИДФоновогоЗадания = Новый УникальныйИдентификатор;
//	КонецЕсли;
//	
//	ПараметрыВыполнения = Новый Массив;
//	ПараметрыВыполнения.Добавить(ТекстПроцедуры);
//	ПараметрыВыполнения.Добавить(СтруктураПараметров);
//	
//	ФоновыеЗадания.Выполнить("пр_Общий.ФоноваяПроцедура", ПараметрыВыполнения, ИДФоновогоЗадания, НаименованиеФоновогоЗадания);
//	Возврат УникальныйИдентификатор;
//	
//КонецФункции

//Процедура ФоноваяПроцедура(ТекстМодуля, ПараметрыВыполнения) Экспорт
//	
//	ПолныйТекстМодуля = "";
//	Для Каждого ТекПараметр Из ПараметрыВыполнения Цикл
//		ПолныйТекстМодуля = ПолныйТекстМодуля + ТекПараметр.Ключ + "=ПараметрыВыполнения." + ТекПараметр.Ключ + ";" + Символы.ПС;
//	КонецЦикла;
//	ПолныйТекстМодуля = ПолныйТекстМодуля + ТекстМодуля;
//	
//	Выполнить(ПолныйТекстМодуля);
//	
//КонецПроцедуры   

Функция ЗапуститьФоновоеВыполнениеВнешнейОбработки(ВнОбработка, ИмяМетода, МассивСтруктурПараметров = Неопределено, ИДФоновогоЗадания = "", НаименованиеФоновогоЗадания = "") Экспорт
	
	//Если ИДФоновогоЗадания = "" Тогда
	//	ИДФоновогоЗадания = Новый УникальныйИдентификатор;
	//КонецЕсли;
	
	ПараметрыВыполнения = Новый Массив; 
	ПараметрыВыполнения.Добавить(ВнОбработка);
	ПараметрыВыполнения.Добавить(ИмяМетода);
	ПараметрыВыполнения.Добавить(МассивСтруктурПараметров);
	
	ФоновыеЗадания.Выполнить("пр_Общий.ФоноваяПроцедураВнешнейОбработки", ПараметрыВыполнения, ИДФоновогоЗадания, НаименованиеФоновогоЗадания);
	Возврат ИДФоновогоЗадания;
	
КонецФункции


Процедура ФоноваяПроцедураВнешнейОбработки(ВнОбработка, ИмяМетода, МассивСтруктурПараметров) Экспорт
	
	//ТекстПараметров = "";                   
	//Н = 0;
	//Для Каждого Эл Из МассивПараметров Цикл
	//	ТекстПараметров = ТекстПараметров + СтрШаблон("П%1,", Н);  
	//	П[Н] = Эл;
	//	Н = Н + 1;
	//КонецЦикла;  
	//ТекстПараметров = Лев(ТекстПараметров, СтрДлина(ТекстПараметров)-1);	
	//ПолныйТекстМодуля = СтрШаблон("", );
	
	Выполнить(ИмяМетода);
	
КонецПроцедуры   


//Функция ВыполнитьМетодФункцииПоИмени(ИмяМетода, МенеджерОбработки = Неопределено, П0 = Null, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null, П6 = Null, П7 = Null, П8 = Null, П9 = Null) Экспорт 
//	
//	Перем Результат;
//	
//	ИмяМетодаСПараметрами = МетодСПараметрамиПоИмени(ИмяМетода);
//	
//	Выполнить("Результат = " + ИмяМетодаСПараметрами);
//	
//	Возврат Результат;
//	
//КонецФункции



#КонецОбласти

Функция ЗаполнитьДанныеФормыДляОбновления(Форма, МассивЗапоминаемыхОбъектов)  Экспорт
	
	 //"\\pivo.local\Resource\Личные\Кириллов ПС\r\Petrushka api\process\ExternUniversalProcessPetrushka.epf"	Строка
	ВнОбработакаОбъект = Форма.РеквизитФормыВЗначение("Объект");
	ПутьКВнешнейОбработке = ВнОбработакаОбъект.ИспользуемоеИмяФайла;			
	ИмяОбработки = ВнОбработакаОбъект.Метаданные().Имя;
	
	СтруктураДанных = Новый Структура();
	Если МассивЗапоминаемыхОбъектов.Количество() > 0 Тогда
		Для каждого Эл Из МассивЗапоминаемыхОбъектов Цикл
			//Дерево = РеквизитФормыВЗначение("КаталогиАпи");
			//СтруктураДанных = Новый Структура("КаталогиАпи", Дерево);
			//ДанныеФормы = ЗначениеВСтрокуВнутр(СтруктураДанных);
			СтруктураДанных.Вставить(Эл.Имя,  Форма.РеквизитФормыВЗначение(Эл.Имя)); 
		КонецЦикла; 
		
	Иначе
		ДанныеФормы = Неопределено;
	КонецЕсли; 
	
	ДанныеФормы = ЗначениеВСтрокуВнутр(СтруктураДанных);
	
	ПараметрыОткрытия = Новый Структура("ПолныйПуть, ИмяОбработки, ДанныеФормы", ПутьКВнешнейОбработке, ИмяОбработки, ДанныеФормы);
	
	ПолныйПуть = "\\pivo.local\Resource\Личные\Кириллов ПС\ОбновляторФорм.epf";
	пр_Общий.СоздатьВнешнююОбработкуПоПути(ПолныйПуть);
	
	Возврат  ПараметрыОткрытия;
	
КонецФункции 

	
#Область  РаботаСДатами

Функция ДатаПоТекущейНедели(НаДеньНедели, ТекДатаНедели = Неопределено)  Экспорт
		
	Если ТекДатаНедели = Неопределено Тогда
		ТекДатаНедели = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ТекНачалоНедели = НачалоНедели(ТекДатаНедели);
	ИндексДатыНедели = Перечисления.ДниНедели.Индекс(НаДеньНедели) + 1;
	
	ДеньНаДеньНедели = ТекНачалоНедели + ИндексДатыНедели * 84600;
	
	Если ДеньНаДеньНедели < ТекДатаНедели Тогда
		ДеньНаДеньНедели = ДеньНаДеньНедели + 86400 * 7;
	КонецЕсли; 
	
	Возврат ДеньНаДеньНедели; 
	
КонецФункции 

Функция ПеречислениеДеньНеделиПоДате(ТекДата)  Экспорт
	
	ДеньНедели = ДеньНедели(ТекДата) - 1;
	ПеречислениеДеньНеделиПоДате = Перечисления.ДниНедели.Получить(ДеньНедели);
	
	Возврат ПеречислениеДеньНеделиПоДате; 
	
КонецФункции 

Функция ДеньНеделиЗаказаБольшеДоставки(ДеньНеделиЗаказа, ДеньНеделиДоставки)  Экспорт
	
	Возврат Перечисления.ДниНедели.Индекс(ДеньНеделиЗаказа) > Перечисления.ДниНедели.Индекс(ДеньНеделиДоставки);
	
КонецФункции 

#КонецОбласти


#Область  БиблиотекаПрограммногоИзмененияФормы


#Область ПрограммныйИнтерфейс

// Добавляет в дерево элементов формы существующие реквизиты объекта и формы
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - изменяемая форма
//
//  МассивРеквизитов  - Массив структур - содержит:
//     * Имя  - Имя добавляемого реквизита
//     * Значение - Структура - содержит (все свойства не обязательные):
//        ** ИмяГруппы 			- Строка - имя элемента родителя
//        ** ПутьКДанным		- Строка - путь к данным. Если не указано, то будет Объект.<ИмяРеквизита>
//        ** ВидПоляФормы		- ВидПоляФормы - вид поля формы. По умолчанию ПолеВвода
//        ** Видимость 			- Булево - значение свойства Видимость
//        ** ТолькоПросмотр 	- Булево - значение свойства ТолькоПросмотр
//        ** Доступность 		- Булево - значение свойства Доступность
//        ** ПоместитьПеред		- Строка - имя элемента, перед которым необходимо разместить
//        ** ОбработкаСобытий 	- Массив структур - содержит:
//           *** Событие 	- Строка - имя события элемента
//           *** Действие 	- Строка - имя процедуры исполнителя события
//
Процедура РазместитьРеквизитыНаФорме(Форма, МассивРеквизитов) Экспорт

	Для каждого ТекРеквизит Из МассивРеквизитов Цикл
		
		ИмяРеквизита 		= ТекРеквизит.Имя;
		ПараметрыРеквизита 	= ТекРеквизит.Значение;   
		
		ЭлементыФормы = Форма.Элементы; 
		Если ЭлементыФормы.Найти(ИмяРеквизита) = Неопределено Тогда
			
			
			Если ПараметрыРеквизита.Свойство("ИмяГруппы") Тогда
				ЭлементРодитель = ЭлементыФормы[ПараметрыРеквизита.ИмяГруппы];
			Иначе
				ЭлементРодитель = Форма;
			КонецЕсли;
			
			ЭлФормы = ЭлементыФормы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), ЭлементРодитель);  
			
			Если ПараметрыРеквизита.Свойство("ВидПоляФормы") Тогда		
				ЭлФормы.Вид = ПараметрыРеквизита.ВидПоляФормы;	
			Иначе
				ЭлФормы.Вид = ВидПоляФормы.ПолеВвода;
			КонецЕсли;                               	
			
			Если ПараметрыРеквизита.Свойство("ПутьКДанным") Тогда 
				ПутьКДанным = ПараметрыРеквизита.ПутьКДанным;
				ЭлФормы.ПутьКДанным = ПутьКДанным;
			Иначе 
				ЭлФормы.ПутьКДанным = "Объект." + ИмяРеквизита;
			КонецЕсли; 
			
			Если ПараметрыРеквизита.Свойство("Видимость") Тогда
				ЭлФормы.Видимость = ПараметрыРеквизита.Видимость;	
			КонецЕсли; 		
			
			Если ПараметрыРеквизита.Свойство("ТолькоПросмотр") Тогда
				ЭлФормы.ТолькоПросмотр = ПараметрыРеквизита.ТолькоПросмотр;	
			КонецЕсли; 		
			
			Если ПараметрыРеквизита.Свойство("Доступность") Тогда
				ЭлФормы.Доступность = ПараметрыРеквизита.Доступность;	
			КонецЕсли; 		
			
			Если ПараметрыРеквизита.Свойство("ПоместитьПеред") Тогда
				ЭлементыФормы.Переместить(ЭлФормы, ЭлементРодитель, ЭлементыФормы[ПараметрыРеквизита.ПоместитьПеред]);	
			КонецЕсли; 		
			
			//--- обработчики событий
			Если ПараметрыРеквизита.Свойство("ОбработкаСобытий")
				И ТипЗнч(ПараметрыРеквизита.ОбработкаСобытий) = Тип("Массив") Тогда
				
				Для каждого ТекСобытие Из ПараметрыРеквизита.ОбработкаСобытий Цикл
					ЭлФормы.УстановитьДействие(ТекСобытие.Событие, ТекСобытие.Действие);		
				КонецЦикла; 			
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 	
	
КонецПроцедуры

// Изменяет свойства элементов формы
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - изменяемая форма
//
//  СтруктураЭлементов  - Структура - содержит:
//     * Ключ  - Имя редактируемого элемента формы
//     * Значение - Массив структур - содержит:
//        ** Имя 		- Строка - имя свойства элемента
//        ** Значение 	- Произвольный - значение свойства элемента
//
Процедура ИзменитьСвойстваЭлементовФормы(Форма, СтруктураЭлементов) Экспорт

	Для каждого ТекРеквизит Из СтруктураЭлементов Цикл
		
		ИмяЭлемента 	= ТекРеквизит.Ключ;
		МассивСвойств 	= ТекРеквизит.Значение;
		
		Элемент = Форма.Элементы[ИмяЭлемента];
		
		Для каждого СвойствоЭлемента Из МассивСвойств Цикл
		
			Элемент[СвойствоЭлемента.Имя] = СвойствоЭлемента.Значение;
		
		КонецЦикла;
		
	КонецЦикла; 	
	
КонецПроцедуры

// Изменяет свойства элемента формы
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - изменяемая форма
//
//  ИмяЭлемента  - Строка - имя элемента формы
//
//  МассивСвойств  - Массив структур - содержит:
//     * Имя 		- Строка - имя свойства элемента
//     * Значение 	- Произвольный - значение свойства элемента
//
Процедура ИзменитьСвойстваЭлементаФормы(Форма, ИмяЭлемента, МассивСвойств) Экспорт

	СтруктураЭлементов = Новый Структура(ИмяЭлемента, МассивСвойств);
	ИзменитьСвойстваЭлементовФормы(Форма, СтруктураЭлементов);
	
КонецПроцедуры

// Изменяет свойства элементов формы
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - изменяемая форма
//
//  ИмяЭлемента  - Строка - имя элемента формы
//
//  ИмяСвойства  - Строка - имя свойства элемента
//
//  ЗначениеСвойства  - Произвольный - значение свойства элемента
//
Процедура ИзменитьСвойствоЭлементаФормы(Форма, ИмяЭлемента, ИмяСвойства, ЗначениеСвойства) Экспорт

	Элемент = Форма.Элементы[ИмяЭлемента];
	Элемент[ИмяСвойства] = ЗначениеСвойства;
	
КонецПроцедуры

// Устанавливает обработчики событий для элемента формы
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - изменяемая форма
//
//  ИмяЭлемента  - Строка - имя элемента формы
//
//  МассивСобытий  - Массив структур - содержит:
//     *Событие 	- Строка - имя события элемента
//     *Действие 	- Строка - имя процедуры исполнителя события
//
Процедура УстановитьСобытияЭлементаФормы(Форма, ИмяЭлемента, МассивСобытий) Экспорт

	Элемент = Форма.Элементы[ИмяЭлемента];
	
	Для каждого ТекСобытие Из МассивСобытий Цикл
		Элемент.УстановитьДействие(ТекСобытие.Событие, ТекСобытие.Действие);		
	КонецЦикла; 			

КонецПроцедуры

// Устанавливает обработчик события для элемента формы
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - изменяемая форма
//
//  ИмяЭлемента  - Строка - имя элемента формы
//
//  Событие  - Строка - имя события элемента
//
//  Действие  - Строка - имя процедуры исполнителя события
//
Процедура УстановитьСобытиеЭлементаФормы(Форма, ИмяЭлемента, Событие, Действие) Экспорт

	Элемент = Форма.Элементы[ИмяЭлемента];
	Элемент.УстановитьДействие(Событие, Действие);		

КонецПроцедуры

// Добавляет в дерево элементов формы новую группу
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - изменяемая форма
//
//  ИмяГруппы  - Строка - имя новой группы
//
//  РодительГруппы  - Строка - родитель группы. Не обязательно
//
//  ВидГруппы  - ВидГруппыФормы - вид группы. По умолчанию ОбычнаяГруппа
//
//  Группировка  - ГруппировкаПодчиненныхЭлементовФормы  - вариант группировки. По умолчанию ГоризонтальнаяЕслиВозможно
//
//  ОтображатьЗаголовок  - Булево - значение свойства ОтображатьЗаголовок группы. По умолчанию Ложь
//
//  Заголовок  - Строка - заголовок группы. По умолчанию заголовок пустой
//
Процедура ДобавитьГруппуНаФорму(Форма, ИмяГруппы, РодительГруппы = "",
								ВидГруппы = Неопределено,
								Группировка = Неопределено,
								ОтображатьЗаголовок = Ложь,
								Заголовок = Неопределено) Экспорт

	Если НЕ ПустаяСтрока(РодительГруппы) Тогда
		ЭлементРодитель = Форма.Элементы[РодительГруппы];	
	Иначе
		ЭлементРодитель = Форма;
	КонецЕсли;
	                       	
	ГруппаФормы = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ЭлементРодитель);
	
	ГруппаФормы.Вид 				= ?(ВидГруппы = Неопределено, ВидГруппыФормы.ОбычнаяГруппа, ВидГруппы);
	ГруппаФормы.Группировка 		= ?(Группировка = Неопределено,
										ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно,
										Группировка);
	ГруппаФормы.ОтображатьЗаголовок = ОтображатьЗаголовок;
	ГруппаФормы.Заголовок = Заголовок;
	
КонецПроцедуры

// Добавляет новые реквизиты формы
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - изменяемая форма
//
//  МассивРеквизитов  - Массив структур - содержит:
//     *ИмяРеквизита  - Строка - имя нового реквизита формы
//     *ТипРевизита  - ОписаниеТипов - тип реквизита. По умолчанию строка неограниченной длины
//     *ЗаголовокРеквизита  - Строка - отображаемый текст реквизита. Не обязательный
//     *Путь  - Строка  - путь к создаваемому реквизиту. Не включает имя реквизита. Не обязательный
//     *СохраняемыеДанные  - Булево  - если реквизит содержит сохраняемые данные. По умолчанию Ложь
//     *РодительЭлемента  - Строка - имя родителя элемента формы,
//	   *ИмяЭлемента  - Строка - если заполнен параметр РодительЭлемента, то дополнительно можно указать имя элемента формы.
//							По умолчанию именем будет ИмяРеквизита
//
Процедура ДобавитьРеквизитыФормы(Форма, МассивРеквизитов, РазместитьРеквизитыНаФорме = Ложь) Экспорт

	ДобавляемыеРеквизиты 	= Новый Массив;
	РеквизитыДляРазмещения 	= Новый Массив;
	
	Для каждого ОписаниеРеквизита Из МассивРеквизитов Цикл
		
		ИмяРеквизита = ОписаниеРеквизита.ИмяРеквизита;
		
		Если ОписаниеРеквизита.Свойство("ТипРевизита") Тогда
			ТипРевизита = ОписаниеРеквизита.ТипРевизита;	
		Иначе
			ТипРевизита = Новый ОписаниеТипов("Строка");
		КонецЕсли;
		
		ЗаголовокРеквизита = "";
		
		Если ОписаниеРеквизита.Свойство("ЗаголовокРеквизита") Тогда
			ЗаголовокРеквизита = ОписаниеРеквизита.ЗаголовокРеквизита;	
		КонецЕсли;
		
		Путь = "";	
		
		Если ОписаниеРеквизита.Свойство("Путь") Тогда
			Путь = ОписаниеРеквизита.Путь;	
		КонецЕсли;
		
		СохраняемыеДанные = Ложь;	
		
		Если ОписаниеРеквизита.Свойство("СохраняемыеДанные") Тогда
			СохраняемыеДанные = ОписаниеРеквизита.СохраняемыеДанные;	
		КонецЕсли;
		
		РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, ТипРевизита, Путь, ЗаголовокРеквизита, СохраняемыеДанные);
		
		ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
		
		//+ Дополнительное размещение реквизитов на форме
		Если ОписаниеРеквизита.Свойство("РодительЭлемента") Тогда
		
			СтруктураЭлемента = Новый Структура;
			СтруктураЭлемента.Вставить("ИмяГруппы", ОписаниеРеквизита.РодительЭлемента);
			
			Если ОписаниеРеквизита.Свойство("Путь") Тогда
				Шаблон = "%1.%2";
				ПутьКДанным = СтрШаблон(Шаблон, ОписаниеРеквизита.Путь, ИмяРеквизита); 	
			Иначе
				ПутьКДанным = ИмяРеквизита;
			КонецЕсли;
			
			СтруктураЭлемента.Вставить("ПутьКДанным", ПутьКДанным);
			
			ИмяЭлемента = ИмяРеквизита;
			
			Если ОписаниеРеквизита.Свойство("ИмяЭлемента") Тогда
				ИмяЭлемента = ОписаниеРеквизита.ИмяЭлемента;	
			КонецЕсли;
			
			СтруктураРеквизитов = Новый Структура;
			СтруктураРеквизитов.Вставить(ИмяЭлемента, СтруктураЭлемента);
			
			РеквизитыДляРазмещения.Добавить(СтруктураРеквизитов);
		
		КонецЕсли;
		//- Дополнительное размещение реквизитов на форме
	
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Если РазместитьРеквизитыНаФорме = Истина Тогда
		РазместитьРеквизитыНаФорме(Форма, РеквизитыДляРазмещения);
	КонецЕсли; 
								
КонецПроцедуры

// Добавляет новый реквизит формы
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - изменяемая форма
//
//  ИмяРеквизита  - Строка - имя нового реквизита формы
//
//  ТипРевизита  - ОписаниеТипов - тип реквизита. По умолчанию строка
//
//  ЗаголовокРеквизита  - Строка - отображаемый текст реквизита. Не обязательный
//
//  Путь  - Строка  - путь к создаваемому реквизиту. Не включает имя реквизита. Не обязательный
//
//  СохраняемыеДанные  - Булево  - если реквизит содержит сохраняемые данные. По умолчанию Ложь
//
//  РодительЭлемента  - Строка - имя родителя элемента формы,
//								если дополнительно необходимо разместить на форме. Не обязательный
//
//  ИмяЭлемента  - Строка - если заполнен параметр РодительЭлемента, то дополнительно можно указать имя элемента формы.
//							По умолчанию именем будет ИмяРеквизита
//
Процедура ДобавитьРеквизитФормы(Форма, ИмяРеквизита, ТипРевизита, ЗаголовокРеквизита = "", Путь = "",
							СохраняемыеДанные = Ложь, РодительЭлемента = "", ИмяЭлемента = "", РазместитьРеквизитыНаФорме = Ложь) Экспорт

	СтруктураРеквизита = Новый Структура;
	СтруктураРеквизита.Вставить("ИмяРеквизита", ИмяРеквизита);
	СтруктураРеквизита.Вставить("ТипРевизита", ТипРевизита);
	
	Если ЗначениеЗаполнено(ЗаголовокРеквизита) Тогда
		СтруктураРеквизита.Вставить("ЗаголовокРеквизита", ЗаголовокРеквизита);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Путь) Тогда
		СтруктураРеквизита.Вставить("Путь", Путь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СохраняемыеДанные) Тогда
		СтруктураРеквизита.Вставить("СохраняемыеДанные", СохраняемыеДанные);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РодительЭлемента) Тогда
		СтруктураРеквизита.Вставить("РодительЭлемента", РодительЭлемента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяЭлемента) Тогда
		СтруктураРеквизита.Вставить("ИмяЭлемента", ИмяЭлемента);
	КонецЕсли;
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(СтруктураРеквизита);
	
	ДобавитьРеквизитыФормы(Форма, МассивРеквизитов, РазместитьРеквизитыНаФорме);
								
КонецПроцедуры

// Добавляет новую команду формы. Дополнительно можно сразу разменить кнопку на форме
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - изменяемая форма
//
//  ИмяКоманды  - Строка - имя новой команды формы
//
//  ДействиеКоманды  - Строка - имя обработчика для команды
//
//  ИмяГруппы  - Строка - имя родительского элемента, если необходимо разместить команду на форме
//			   - Неопределено - если нужно только создать новую команду
//								По умолчанию команда размещается в корне формы
//
//  ВидКнопки  - ВидКнопкиФормы   - вид кнопки формы. По умолчанию ОбычнаяКнопка или КнопкаКоманднойПанели,
//														зависит от родителя
//
//  Заголовок  - Строка  - заголовок кнопки формы. Не обязательный
//
//  ПоместитьПеред  - Строка - имя элемента, перед которым необходимо разместить кнопку формы. Не обязательный
//
//  Картинка  - Картинка - картинка кнопки формы. Не обязательный
//
//  ОтображениеКнопки  - ОтображениеКнопки - вариант отражение кнопки на форме. Учитывается только если
//												заполнен параметр Картинка. Не обязательный
//
Процедура ДобавитьРазместитьКомандуФормы(Форма, ИмяКоманды, ДействиеКоманды, ИмяГруппы = "", ВидКнопки = Неопределено,
										Заголовок = "", ПоместитьПеред = "",
										Картинка = Неопределено, ОтображениеКнопки = Неопределено) Экспорт

	Команда = Форма.Команды.Добавить(ИмяКоманды);
	Команда.Действие = ДействиеКоманды;
	
	Если ЗначениеЗаполнено(Заголовок) Тогда
		Команда.Заголовок = Заголовок;
	КонецЕсли;
	
	Если Картинка <> Неопределено Тогда
	
		Команда.Картинка = Картинка;
		
		Если ОтображениеКнопки <> Неопределено Тогда
			Команда.Отображение = ОтображениеКнопки;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ИмяГруппы = Неопределено Тогда
		Возврат;	
	ИначеЕсли ЗначениеЗаполнено(ИмяГруппы) Тогда
		ЭлементРодитель = Форма.Элементы[ИмяГруппы];
	Иначе
		ЭлементРодитель = Форма;
	КонецЕсли;
	
	КнопкаФормы = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ЭлементРодитель);
	КнопкаФормы.ИмяКоманды = ИмяКоманды;
	
	Если ВидКнопки <> Неопределено Тогда
		КнопкаФормы.Вид = ВидКнопки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоместитьПеред) Тогда
		Форма.Элементы.Переместить(КнопкаФормы, ЭлементРодитель, Форма.Элементы[ПоместитьПеред]);	
	КонецЕсли; 		

КонецПроцедуры

// Общая для всех задач по модификации форм. Желательно использовать с процедурой СобытияФорм.ПриСозданииНаСервере
//
// Параметры:
//  Форма					- ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ					- Булево - признак отказа от создания формы.
//  СтандартнаяОбработка	- Булево - признак выполнения стандартной (системной) обработки события
//  ДополнительныеПараметры	- Структура - дополнительные параметры.
//
Процедура МодифицироватьФорму(Форма, Отказ = Ложь, СтандартнаяОбработка = Истина, ДополнительныеПараметры = Неопределено) Экспорт

	ИмяФормы = форма.имяФормы;   
	
	//|-------------------------------------------------------|
	//|справочники и документы добавлять в АЛФАВИТНОМ порядке |
	//|-------------------------------------------------------|
	
	Если Ложь Тогда // Заглушка
		
#Область Справочники

	ИначеЕсли СтрНайти(ИмяФормы, "Справочник.ДоговорыКонтрагентов.Форма.ФормаЭлемента") Тогда
		
		МодифицироватьФорму_ДоговорыКонтрагентов_ФормаЭлемента(Форма);
	
	ИначеЕсли СтрНайти(ИмяФормы, "Справочник.КонтактныеЛицаПартнеров.Форма.ФормаЭлемента") Тогда
		
		МодифицироватьФорму_КонтактныеЛицаПартнеров_ФормаЭлемента(Форма);
	
	ИначеЕсли СтрНайти(ИмяФормы, "Справочник.Склады.Форма.ФормаЭлемента") Тогда
		
		МодифицироватьФорму_Склады_ФормаЭлемента(Форма);
	
#КонецОбласти	

#Область Документы

	ИначеЕсли СтрНайти(ИмяФормы, "Документ.ПланЗакупок.Форма.ФормаДокумента") Тогда	
		
		МодифицироватьФорму_ПланЗакупок_ФормаДокумента(Форма);		
	
#КонецОбласти	

#Область Обработки

#КонецОбласти

#Область Отчеты

#КонецОбласти 

#Область ПрочиеФормы
	
#КонецОбласти 

	КонецЕсли; // Конец общего если	

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыДляМодификацииФорм

// Примеры использования:

Процедура МодифицироватьФорму_ДоговорыКонтрагентов_ФормаЭлемента(Форма)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяГруппы", "ГруппаРасчетыЛевая");
	СтруктураПараметров.Вставить("Видимость", Ложь);//Форма.Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем);
		
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(ПолучитьЗаполненнуюСтруктуру("НомерЗаказа", СтруктураПараметров));
	МассивРеквизитов.Добавить(ПолучитьЗаполненнуюСтруктуру("КодПартнера", СтруктураПараметров));
	
	РазместитьРеквизитыНаФорме(Форма, МассивРеквизитов);
	
КонецПроцедуры 

Процедура МодифицироватьФорму_КонтактныеЛицаПартнеров_ФормаЭлемента(Форма)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяГруппы", 		"ГруппаОсновныеСведения");
	СтруктураПараметров.Вставить("ПоместитьПеред", 	"ГруппаРодители");
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(ПолучитьЗаполненнуюСтруктуру("ДолжностьДляПечати", СтруктураПараметров));
	
	РазместитьРеквизитыНаФорме(Форма, МассивРеквизитов);
	
	ДобавитьРазместитьКомандуФормы(Форма, "Склонения", "Подключаемый_Склонения", "ГруппаОсновныеСведения",
									ВидКнопкиФормы.Гиперссылка,, "ДолжностьПоВизитке");
	
КонецПроцедуры	

Процедура МодифицироватьФорму_Склады_ФормаЭлемента(Форма)

	МассивСвойств = Новый Массив;
	МассивСвойств.Добавить(ПолучитьЗаполненнуюСтруктуру("Видимость", Ложь)); 
	
	СтруктураЭлементов = Новый Структура;
	СтруктураЭлементов.Вставить("ГруппаМОЛОтступ", МассивСвойств);
	
	ИзменитьСвойстваЭлементовФормы(Форма, СтруктураЭлементов);

КонецПроцедуры

Процедура МодифицироватьФорму_ПланЗакупок_ФормаДокумента(Форма)

	МассивРеквизитов = Новый Массив;
	
	ВариантПланирования = 1;//ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Объект.Ссылка, "ВариантПланирования", Истина);
	ЭтоВариантПоЗаказу = ВариантПланирования = Перечисления.ВариантыПланирования.ПоЗаказуИзделию;
	
	//--> ДОБАВЛЯЕМ ВариантПланирования
	ОбработкаСобытий = Новый Массив;
	ОбработкаСобытий.Добавить(Новый Структура("Событие, Действие",
												"ПриИзменении",
												"Подключаемый_ВариантПланированияПриИзменении"));	
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяГруппы", 			"ШапкаПраво");
	СтруктураПараметров.Вставить("ПоместитьПеред", 		"НачалоОкончаниеПериода");
	СтруктураПараметров.Вставить("ОбработкаСобытий", 	ОбработкаСобытий);
	
	МассивРеквизитов.Добавить(ПолучитьЗаполненнуюСтруктуру("ВариантПланирования", СтруктураПараметров));
	//<-- ДОБАВЛЯЕМ ВариантПланирования
	
	//--> ДОБАВЛЯЕМ ЗаказКлиента
	ОбработкаСобытий = Новый Массив;
	ОбработкаСобытий.Добавить(Новый Структура("Событие, Действие",
												"ПриИзменении",
												"Подключаемый_ЗаказКлиентаПриИзменении"));	
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяГруппы", 			"ШапкаПраво");
	СтруктураПараметров.Вставить("Видимость",           ЭтоВариантПоЗаказу);
	СтруктураПараметров.Вставить("ПоместитьПеред", 		"Назначение");
	СтруктураПараметров.Вставить("ОбработкаСобытий", 	ОбработкаСобытий);
	
	МассивРеквизитов.Добавить(ПолучитьЗаполненнуюСтруктуру("ЗаказКлиента", СтруктураПараметров));
	//<-- ДОБАВЛЯЕМ ЗаказКлиента
	
	//--> ДОБАВЛЯЕМ Изделие
	ОбработкаСобытий = Новый Массив;
	ОбработкаСобытий.Добавить(Новый Структура("Событие, Действие",
												"НачалоВыбора",
												"Подключаемый_ИзделиеНачалоВыбора"));	
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяГруппы", 			"ШапкаПраво");
	СтруктураПараметров.Вставить("Видимость",           ЭтоВариантПоЗаказу);
	СтруктураПараметров.Вставить("ПоместитьПеред", 		"ГруппаОтражатьВБюджетировании");
	СтруктураПараметров.Вставить("ОбработкаСобытий", 	ОбработкаСобытий);
	
	МассивРеквизитов.Добавить(ПолучитьЗаполненнуюСтруктуру("Изделие", СтруктураПараметров));
	//<-- ДОБАВЛЯЕМ Изделие
	
	РазместитьРеквизитыНаФорме(Форма, МассивРеквизитов);
	
	МассивСвойств = Новый Массив;
	МассивСвойств.Добавить(ПолучитьЗаполненнуюСтруктуру("Видимость", НЕ ЭтоВариантПоЗаказу)); 
	
	СтруктураЭлементов = Новый Структура;
	СтруктураЭлементов.Вставить("НачалоОкончаниеПериода", МассивСвойств);
	
	МассивСвойств = Новый Массив;
	МассивСвойств.Добавить(ПолучитьЗаполненнуюСтруктуру("РедактированиеТекста", Ложь)); 
	СтруктураЭлементов.Вставить("Изделие", МассивСвойств);
	
	МассивСвойств = Новый Массив;
	МассивСвойств.Добавить(ПолучитьЗаполненнуюСтруктуру("ТолькоПросмотр", ЭтоВариантПоЗаказу)); 
	СтруктураЭлементов.Вставить("ТоварыДатаПоступления", МассивСвойств);
	
	ИзменитьСвойстваЭлементовФормы(Форма, СтруктураЭлементов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создает новую структуру для добавления элемента формы, и заполняет ее 
//
// Параметры:
//  ИмяРеквизита  - Строка - Имя добавляемого элемента
//
//  ПараметрыРеквизита  - Структура - см. описание РазместитьРеквизитыНаФорме
//
// Возвращаемое значение:
//   Структура   - заполненная структура
//
Функция ПолучитьЗаполненнуюСтруктуру(Имя, Значение)  Экспорт

	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Имя", 	 Имя);
	СтруктураПараметров.Вставить("Значение", Значение);
	
	Возврат СтруктураПараметров;

КонецФункции

#КонецОбласти


#КонецОбласти


#Область JSON

#Область  ЗаписьJSON 

Функция JSONЗаписать(СтруктураДанных, ФормироватьСПереносами = Ложь,  Путь = "", Сериализовать = Ложь) Экспорт
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Попытка
		ЗаписьJSON = Новый ЗаписьJSON;
		ПереносСтрок = ?(ФормироватьСПереносами = Истина, ПереносСтрокJSON.Авто, ПереносСтрокJSON.Нет);
		ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрок, Символы.Таб);
		
		Если Путь = "" Тогда
			ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
		Иначе 	
			ЗаписьJSON.ОткрытьФайл(Путь,,,ПараметрыЗаписиJSON);
		КонецЕсли; 
		
		Если Сериализовать = Истина Тогда
			СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, СтруктураДанных, НазначениеТипаXML.Явное);
		Иначе
			НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
			НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением;
			НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
			
			ЗаписатьJSON(ЗаписьJSON, СтруктураДанных, НастройкиСериализацииJSON);
		КонецЕсли; 
		
		Возврат ЗаписьJSON.Закрыть();
	Исключение
		ЗаписатьОшибку(ИнформацияОбОшибке(), Истина);
	КонецПопытки; 
	
КонецФункции

#КонецОбласти
 
#Область  ЧтениеJSON 

Функция JSONПрочитать(ТелоЗапроса = Неопределено, ИменаПолейДат = "",  Путь = "", Сериализовать = Ложь)   Экспорт
	
	Если ТелоЗапроса = Неопределено И Путь = "" Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Если Путь <> "" Тогда
		ЧтениеJSON.ОткрытьФайл(Путь); 
	ИначеЕсли ТипЗнч(ТелоЗапроса) = Тип("Поток") Тогда
		ЧтениеJSON.ОткрытьПоток(ТелоЗапроса); 
	Иначе
		ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
	КонецЕсли; 

	Если Сериализовать = Ложь Тогда
		Если ИменаПолейДат = "" Тогда
			ДанныеHTTPЗапроса = ПрочитатьJSON(ЧтениеJSON);
		Иначе
			ДанныеHTTPЗапроса = ПрочитатьJSON(ЧтениеJSON,, ИменаПолейДат, ФорматДатыJSON.ISO);
		КонецЕсли; 
	Иначе
		ДанныеHTTPЗапроса = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
	КонецЕсли;
	
	ЧтениеJSON.Закрыть();
	
	Возврат ДанныеHTTPЗапроса;
	
КонецФункции

Функция ОбработатьJSON(СтрокаJSON) Экспорт
	
	Если СтрокаJSON = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ДанныеВозврата = Неопределено;
	
	Попытка
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(СтрокаJSON);
		
		ДанныеВозврата = ПрочитатьJSON(Чтение, Истина,,, "ПреобразованиеJSON");
	Исключение
		ЗаписатьОшибку(ИнформацияОбОшибке(), Истина); 
	КонецПопытки; 
	
	Возврат ДанныеВозврата;
КонецФункции

Функция ПреобразованиеJSON(Свойство, Значение, ДополнительныеПараметры) Экспорт
	Если Свойство = "date" Тогда
		Попытка
			Возврат Дата("19700101") + ?(ТипЗнч(Значение) = Тип("Строка"), Число(Значение), Значение);
		Исключение
			Возврат Дата(1,1,1);
		КонецПопытки;
	КонецЕсли; 
КонецФункции

#КонецОбласти 

#КонецОбласти


#Область  ОтправкаТелеграмБот

//БазаИсточник, Метод, Объект1С = "", ОшибкаДляТелеграмм = "", БазаПриемник = "", Версия = "", Данные = Неопределено, ДопИнформация = ""
Функция ОтправитьСообщениеВТелеграмDev(Метод, Объект1С = "", ОшибкаДляТелеграмм = "", Версия = "", Данные = Неопределено, ДопИнформация = "")  Экспорт
	
	Попытка
		
		//ayan_dev
		chat_id = "-1001876356684";  
		token = "6678094360:AAEv4G_sliB0-dGV44VW6grZxhlB6-LP9Xs"; 
		Если НЕ ЗначениеЗаполнено(chat_id) ИЛИ НЕ ЗначениеЗаполнено(token) Тогда
			Возврат Неопределено;	
		КонецЕсли; 
		
		//Параметры запраса
		text = "БазаИсточник: " + ПолучитьИмяИнформационнойБазы(Истина) + Символы.ПС;
		
		text = text + "Метод: " + Метод + Символы.ПС;
		
		text = text + "Пользователь: " + Строка(пр_НастройкиПовтИсп.ТекущийПользователь()) + Символы.ПС;
		
		Если Объект1С <> "" Тогда
			text = text + "Объект 1С: " + Строка(Объект1С) + Символы.ПС;
		КонецЕсли; 
		
		Если Версия <> "" Тогда
			text = text + "Версия: " + Версия + Символы.ПС;
		КонецЕсли; 
		
		//Если Клиент <> "" Тогда
		//	text = text + "Клиент: " + Строка(Клиент) + Символы.ПС;
		//КонецЕсли; 
		
		Если ДопИнформация <> "" Тогда
			Если ТипЗнч(ДопИнформация) = пр_НастройкиПовтИсп.ТипСтруктура() Тогда
				ДопИнформацияТекст = "";
				Для каждого КлючЗначение Из ДопИнформация Цикл
					ДопИнформацияТекст = ДопИнформацияТекст + СтрШаблон("%1 : %2", КлючЗначение.Ключ, КлючЗначение.Значение) + Символы.ПС;
				КонецЦикла;
			Иначе
				ДопИнформацияТекст = ДопИнформация;	
			КонецЕсли; 
			text = text + "ДопИнформация: " + ДопИнформацияТекст + Символы.ПС;
		КонецЕсли; 
		
		
		//Описание Ошибки
		Если ОшибкаДляТелеграмм <> "" Тогда
			text = text + "Ошибка!:" + ОшибкаДляТелеграмм + Символы.ПС;
		КонецЕсли; 
		
		////ДанныеЗапроса
		//Если Входящий <> "" Тогда
		//	Если Входящий = Истина Тогда
		//		НаправлениеЗапроса = "Входящий запрос:";
		//	Иначе 	
		//		НаправлениеЗапроса = "Исходящий запрос:";
		//	КонецЕсли; 
		//КонецЕсли; 
		//
		//Если ТелоЗапроса <> "" Тогда
		//	text = text + НаправлениеЗапроса + Символы.ПС;
		//	text = text + пр_Общий.JSONЗаписать(ТелоЗапроса, Истина);
		//КонецЕсли; 
		
		Результат = SendMessageНаСервере(chat_id, token, text);
		Возврат  Результат;
		
	Исключение
		Возврат Неопределено;	
	КонецПопытки; 
	
КонецФункции

Функция SendMessageНаСервере(chat_id, token, text, parse_mode = Неопределено, disable_web_page_preview = Неопределено, 
		disable_notification = Неопределено, reply_to_message_id = 0, reply_markup = Неопределено) Экспорт  
	
	Если НЕ ЗначениеЗаполнено(chat_id) ИЛИ НЕ ЗначениеЗаполнено(text) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ПараметрыЗапроса = Новый Соответствие;
	ПараметрыЗапроса.Вставить("chat_id", ЧислоВСтроку(chat_id));
	ПараметрыЗапроса.Вставить("text", text);
	ПараметрыЗапроса.Вставить("parse_mode", Строка(parse_mode));
	ПараметрыЗапроса.Вставить("disable_web_page_preview", ФорматироватьБулево(disable_web_page_preview));
	ПараметрыЗапроса.Вставить("disable_notification", ФорматироватьБулево(disable_notification));
	ПараметрыЗапроса.Вставить("reply_to_message_id", ЧислоВСтроку(reply_to_message_id));
	ПараметрыЗапроса.Вставить("reply_markup", JSONЗаписать(reply_markup));
	
	Результат = ОтправитьHTTPЗапросТелеграм(token, "sendMessage", ПараметрыЗапроса);
	
	Возврат ОбработатьJSON(Результат); 
	
КонецФункции

Функция ОтправитьHTTPЗапросТелеграм(token, method, method_param = Неопределено, Данные = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Попытка
		СоединениеHTTP = Новый HTTPСоединение("api.telegram.org", 443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
		
		ПараметрыЗапроса = Новый Соответствие;
		ПараметрыЗапроса.Вставить("token", token);
		ПараметрыЗапроса.Вставить("method", method);
		ПараметрыЗапроса.Вставить("method_param", method_param);
		
		HTTPЗапрос = Новый HTTPЗапрос;
		Если Данные = Неопределено Тогда
			HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json");
		Иначе	
			ТекстЗапроса = СформироватьТелоЗапроса(Данные);
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ТекстЗапроса);
			
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + Данные["Boundary"]);
			HTTPЗапрос.Заголовки.Вставить("Content-Length", Формат(ТекстЗапроса.Размер(), "ЧДЦ=0; ЧН=0; ЧГ=0"));
		КонецЕсли; 
		HTTPЗапрос.АдресРесурса = СформироватьМетод(ПараметрыЗапроса);
		
		Если Данные = Неопределено Тогда
			РезультатЗапроса = СоединениеHTTP.Получить(HTTPЗапрос);
		Иначе
			РезультатЗапроса = СоединениеHTTP.ОтправитьДляОбработки(HTTPЗапрос);
		КонецЕсли; 
		
		Если РезультатЗапроса.КодСостояния = 200 Тогда
			Результат = РезультатЗапроса.ПолучитьТелоКакСтроку();
		Иначе
			//РегистрыСведений.tl_Логи.ЛогHTTP(РезультатЗапроса);	
		КонецЕсли; 
		
	Исключение
		ЗаписатьОшибку(ИнформацияОбОшибке(), Истина);
	КонецПопытки; 
	
	Возврат Результат;
КонецФункции

Функция СформироватьМетод(ПараметрыЗапроса)
	Стр = "";
	ПараметрыМетода = "";
	
	// Переделать формирование строки с методом и параметрами под конкретный API
	// данная реализация для ВКонтакте
	Если ЗначениеЗаполнено(ПараметрыЗапроса["method_param"]) Тогда
		
		СтрокиПараметров = Новый Массив;
		
		Для каждого Строка Из ПараметрыЗапроса["method_param"] Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Значение) Тогда
				Продолжить;
			КонецЕсли;	
			
			СтрокиПараметров.Добавить(СтрШаблон("%1=%2", Строка.Ключ, Строка.Значение));
		КонецЦикла; 
		
		ПараметрыМетода = СтрСоединить(СтрокиПараметров, "&");
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПараметрыМетода) Тогда
		Стр = СтрШаблон("bot%1/%2?%3", ПараметрыЗапроса["token"], ПараметрыЗапроса["method"], ПараметрыМетода); 
	Иначе
		Стр = СтрШаблон("bot%1/%2", ПараметрыЗапроса["token"], ПараметрыЗапроса["method"]); 
	КонецЕсли; 
	
	Возврат Стр;
КонецФункции
 
Функция СформироватьТелоЗапроса(Данные)
	
    Тело         = Новый ПотокВПамяти();
    ЗаписьДанных = Новый ЗаписьДанных(Тело, КодировкаТекста.UTF8, ПорядокБайтов.LittleEndian, Символы.ВК + Символы.ПС, Символы.ПС, Истина);
	
    ЗаписьДанных.ЗаписатьСтроку("--" + Данные["Boundary"]);
    ЗаписьДанных.ЗаписатьСтроку(СтрШаблон("Content-Disposition: form-data; name=""%1""; filename=""%2""", Данные["name"], Данные["ИмяФайла"]));
    ЗаписьДанных.ЗаписатьСтроку("Content-Type:" + Данные["Content-Type"]);
    ЗаписьДанных.ЗаписатьСтроку("");   
	
	ДвоичныеДанные = Новый ДвоичныеДанные(Данные["ИмяФайлаПолное"]);
    ЗаписьДанных.Записать(ДвоичныеДанные);
	
	ЗаписьДанных.ЗаписатьСтроку("");
    ЗаписьДанных.ЗаписатьСтроку("--" + Данные["Boundary"] + "--");
    ЗаписьДанных.Закрыть();
    
    ДанныеТела = Тело.ЗакрытьИПолучитьДвоичныеДанные(); 
	
	Возврат ДанныеТела;
КонецФункции

#Область СлужебныеПроцедурыИФункции

//TODO:  доработать
Процедура ЗаписатьОшибку(ИнформацияОбОшибке = Неопределено, ЛогОбязательно = Ложь) Экспорт
	
	Если ИнформацияОбОшибке = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	//TODO:  Добавить опцию ВестиЛоги()
	Если  ЛогОбязательно = Ложь Тогда 
		Возврат;	
	КонецЕсли; 
	
	ДобавитьЗапись("Ошибка", 
		ИнформацияОбОшибке.ИмяМодуля + " " + ИнформацияОбОшибке.НомерСтроки, 
		ИнформацияОбОшибке.Описание);
	
КонецПроцедуры 
	
//TODO:  Заменить на логи Телеграм - Канал для ошибок баз
Процедура ДобавитьЗапись(ТипСообщения, Контекст, Данные)
	Если ЗначениеЗаполнено(Данные) Тогда 
		//ТекстДок = Новый ТекстовыйДокумент;
		//ТекстДок.ВставитьСтроку("" + ТипСообщения + "/" + Контекст + "/" + Данные); 	
		//ТекстДок.Записать("\\pivo.local\Resource\Личные\Кириллов ПС\r\ut_2021\work\Логи\ЕГАИС\" + ТекущаяДата() + ".txt");
		//МенеджерЗаписи = РегистрыСведений.tl_Логи.СоздатьМенеджерЗаписи();
		//МенеджерЗаписи.Период = ТекущаяДата();
		//МенеджерЗаписи.ТипСообщения = ТипСообщения;
		//МенеджерЗаписи.Контекст = Контекст;
		//МенеджерЗаписи.Данные = Данные;
		//МенеджерЗаписи.Записать();
	КонецЕсли; 
КонецПроцедуры

Функция ЛогHTTP(ДанныеHTTP) Экспорт
	ИнформацияТелеграм = "";
	
	//TODO:  Добавить опцию ВестиЛоги()
	//Если НЕ ВестиЛоги() Тогда
	//	Возврат ИнформацияТелеграм;
	//КонецЕсли; 
	
	Если ТипЗнч(ДанныеHTTP) = Тип("HTTPЗапрос") Тогда
		ИнформацияТелеграм = СформироватьДанныеHTTPЗапроса(ДанныеHTTP);
	ИначеЕсли ТипЗнч(ДанныеHTTP) = Тип("HTTPОтвет") Тогда 	
		ИнформацияТелеграм = СформироватьДанныеHTTPОтвета(ДанныеHTTP);
	ИначеЕсли ТипЗнч(ДанныеHTTP) = Тип("HTTPСервисЗапрос") Тогда 	
		ИнформацияТелеграм = СформироватьДанныеHTTPЗапроса(ДанныеHTTP);
	КонецЕсли; 
	
	ЗаписатьHTTPЗапрос("ЛогHTTP", ИнформацияТелеграм);	
	
	Возврат ИнформацияТелеграм;
КонецФункции    

Процедура ЗаписатьHTTPЗапрос(Контекст, Данные) Экспорт
	ДобавитьЗапись("HTTPЗапрос", Контекст, Данные);
КонецПроцедуры


Функция СформироватьДанныеHTTPЗапроса(ЗапросHTTP)
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("HTTP метод = " + ЗапросHTTP.HTTPМетод);
	МассивСтрок.Добавить("БазовыйURL: " + ЗапросHTTP.БазовыйURL);
	МассивСтрок.Добавить("Заголовки: " + Символы.ПС + JSONЗаписать(ЗапросHTTP.Заголовки, Истина));
	МассивСтрок.Добавить("ОтносительныйURL: " + ЗапросHTTP.ОтносительныйURL);
	МассивСтрок.Добавить("ПараметрыURL: " + Символы.ПС + JSONЗаписать(ЗапросHTTP.ПараметрыURL, Истина));
	МассивСтрок.Добавить("ПараметрыЗапроса: " + Символы.ПС + JSONЗаписать(ЗапросHTTP.ПараметрыЗапроса, Истина));
	МассивСтрок.Добавить("Тело: " + Символы.ПС + JSONЗаписать(ОбработатьJSON(ЗапросHTTP.ПолучитьТелоКакСтроку()), Истина));
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
КонецФункции

Функция СформироватьДанныеHTTPОтвета(ОтветHTTP)
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("КодСостояния = " + ОтветHTTP.КодСостояния);
	МассивСтрок.Добавить("Заголовки: " + Символы.ПС + JSONЗаписать(ОтветHTTP.Заголовки, Истина));
	МассивСтрок.Добавить("Тело: " + Символы.ПС + ОтветHTTP.ПолучитьТелоКакСтроку());
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
КонецФункции


	
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",",
	Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ФорматироватьБулево(ТекущееЗначение) Экспорт
	Возврат Формат(ТекущееЗначение, "БЛ=False; БИ=True");
КонецФункции

Функция КоординатыВСтроку(ТекущееЗначение) Экспорт
	Если ТекущееЗначение = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Формат(ТекущееЗначение, "ЧЦ=8; ЧДЦ=6; ЧРД=.; ЧРГ=''; ЧГ=0");
	КонецЕсли; 
КонецФункции

Функция ЧислоВСтроку(ТекущееЗначение) Экспорт
	Если ТекущееЗначение = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Формат(ТекущееЗначение, "ЧРГ=''; ЧГ=0");
	КонецЕсли; 
КонецФункции

#КонецОбласти 

#КонецОбласти

// ОМ.пр_общий